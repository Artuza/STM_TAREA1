
PC_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003178  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800330c  0800330c  0000430c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800334c  0800334c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  0800334c  0800334c  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800334c  0800334c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800334c  0800334c  0000434c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003350  08003350  00004350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003354  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000b0  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009fd7  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001853  00000000  00000000  0000f013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  00010868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000582  00000000  00000000  00010f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eefa  00000000  00000000  0001151a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a024  00000000  00000000  00030414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc52b  00000000  00000000  0003a438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f6963  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c4c  00000000  00000000  000f69a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  000f85f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080032f4 	.word	0x080032f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080032f4 	.word	0x080032f4

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  HAL_Init();
 80001d8:	f000 f9ec 	bl	80005b4 <HAL_Init>
  SystemClock_Config();
 80001dc:	f000 f8bc 	bl	8000358 <SystemClock_Config>
  MX_GPIO_Init();
 80001e0:	f000 f854 	bl	800028c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f822 	bl	800022c <MX_USART2_UART_Init>
    // Transmitimos un mensaje de prueba cada segundo
    //HAL_UART_Transmit(&huart2, tx_buffer, 27, 10);
    //HAL_Delay(1000);

    // Recibimos la palabra
    HAL_UART_Receive(&huart2, rx_buffer, 4, 100); // Recibimos los 4 caracteres de "hola"
 80001e8:	2364      	movs	r3, #100	@ 0x64
 80001ea:	2204      	movs	r2, #4
 80001ec:	490c      	ldr	r1, [pc, #48]	@ (8000220 <main+0x4c>)
 80001ee:	480d      	ldr	r0, [pc, #52]	@ (8000224 <main+0x50>)
 80001f0:	f002 f838 	bl	8002264 <HAL_UART_Receive>

    // Verificamos si se ha recibido "hola"
    if(strncmp((char*)rx_buffer, "hola", 4) == 0)
 80001f4:	2204      	movs	r2, #4
 80001f6:	490c      	ldr	r1, [pc, #48]	@ (8000228 <main+0x54>)
 80001f8:	4809      	ldr	r0, [pc, #36]	@ (8000220 <main+0x4c>)
 80001fa:	f003 f844 	bl	8003286 <strncmp>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d106      	bne.n	8000212 <main+0x3e>
    {
      // Encendemos el LED
      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000204:	2201      	movs	r2, #1
 8000206:	2120      	movs	r1, #32
 8000208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800020c:	f000 fd50 	bl	8000cb0 <HAL_GPIO_WritePin>
 8000210:	e7ea      	b.n	80001e8 <main+0x14>
    }
    else
    {
      // Apagamos el LED
      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	2120      	movs	r1, #32
 8000216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021a:	f000 fd49 	bl	8000cb0 <HAL_GPIO_WritePin>
    HAL_UART_Receive(&huart2, rx_buffer, 4, 100); // Recibimos los 4 caracteres de "hola"
 800021e:	e7e3      	b.n	80001e8 <main+0x14>
 8000220:	200000b0 	.word	0x200000b0
 8000224:	20000028 	.word	0x20000028
 8000228:	0800330c 	.word	0x0800330c

0800022c <MX_USART2_UART_Init>:
}

/* System Clock Configuration and Peripheral Initialization Functions */

static void MX_USART2_UART_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000230:	4b14      	ldr	r3, [pc, #80]	@ (8000284 <MX_USART2_UART_Init+0x58>)
 8000232:	4a15      	ldr	r2, [pc, #84]	@ (8000288 <MX_USART2_UART_Init+0x5c>)
 8000234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000236:	4b13      	ldr	r3, [pc, #76]	@ (8000284 <MX_USART2_UART_Init+0x58>)
 8000238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800023c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800023e:	4b11      	ldr	r3, [pc, #68]	@ (8000284 <MX_USART2_UART_Init+0x58>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000244:	4b0f      	ldr	r3, [pc, #60]	@ (8000284 <MX_USART2_UART_Init+0x58>)
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800024a:	4b0e      	ldr	r3, [pc, #56]	@ (8000284 <MX_USART2_UART_Init+0x58>)
 800024c:	2200      	movs	r2, #0
 800024e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000250:	4b0c      	ldr	r3, [pc, #48]	@ (8000284 <MX_USART2_UART_Init+0x58>)
 8000252:	220c      	movs	r2, #12
 8000254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000256:	4b0b      	ldr	r3, [pc, #44]	@ (8000284 <MX_USART2_UART_Init+0x58>)
 8000258:	2200      	movs	r2, #0
 800025a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800025c:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <MX_USART2_UART_Init+0x58>)
 800025e:	2200      	movs	r2, #0
 8000260:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000262:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <MX_USART2_UART_Init+0x58>)
 8000264:	2200      	movs	r2, #0
 8000266:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000268:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <MX_USART2_UART_Init+0x58>)
 800026a:	2200      	movs	r2, #0
 800026c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800026e:	4805      	ldr	r0, [pc, #20]	@ (8000284 <MX_USART2_UART_Init+0x58>)
 8000270:	f001 ffaa 	bl	80021c8 <HAL_UART_Init>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800027a:	f000 f8b0 	bl	80003de <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000028 	.word	0x20000028
 8000288:	40004400 	.word	0x40004400

0800028c <MX_GPIO_Init>:

/* GPIO Initialization Function */
static void MX_GPIO_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b08a      	sub	sp, #40	@ 0x28
 8000290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	f107 0314 	add.w	r3, r7, #20
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000350 <MX_GPIO_Init+0xc4>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <MX_GPIO_Init+0xc4>)
 80002a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002ac:	6153      	str	r3, [r2, #20]
 80002ae:	4b28      	ldr	r3, [pc, #160]	@ (8000350 <MX_GPIO_Init+0xc4>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002b6:	613b      	str	r3, [r7, #16]
 80002b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002ba:	4b25      	ldr	r3, [pc, #148]	@ (8000350 <MX_GPIO_Init+0xc4>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	4a24      	ldr	r2, [pc, #144]	@ (8000350 <MX_GPIO_Init+0xc4>)
 80002c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002c4:	6153      	str	r3, [r2, #20]
 80002c6:	4b22      	ldr	r3, [pc, #136]	@ (8000350 <MX_GPIO_Init+0xc4>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000350 <MX_GPIO_Init+0xc4>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000350 <MX_GPIO_Init+0xc4>)
 80002d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b1c      	ldr	r3, [pc, #112]	@ (8000350 <MX_GPIO_Init+0xc4>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002e6:	60bb      	str	r3, [r7, #8]
 80002e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ea:	4b19      	ldr	r3, [pc, #100]	@ (8000350 <MX_GPIO_Init+0xc4>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a18      	ldr	r2, [pc, #96]	@ (8000350 <MX_GPIO_Init+0xc4>)
 80002f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b16      	ldr	r3, [pc, #88]	@ (8000350 <MX_GPIO_Init+0xc4>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	2120      	movs	r1, #32
 8000306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800030a:	f000 fcd1 	bl	8000cb0 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = B1_Pin;
 800030e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000314:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800031e:	f107 0314 	add.w	r3, r7, #20
 8000322:	4619      	mov	r1, r3
 8000324:	480b      	ldr	r0, [pc, #44]	@ (8000354 <MX_GPIO_Init+0xc8>)
 8000326:	f000 fb39 	bl	800099c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD2_Pin;
 800032a:	2320      	movs	r3, #32
 800032c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	2300      	movs	r3, #0
 8000338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800033a:	f107 0314 	add.w	r3, r7, #20
 800033e:	4619      	mov	r1, r3
 8000340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000344:	f000 fb2a 	bl	800099c <HAL_GPIO_Init>
}
 8000348:	bf00      	nop
 800034a:	3728      	adds	r7, #40	@ 0x28
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40021000 	.word	0x40021000
 8000354:	48000800 	.word	0x48000800

08000358 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b090      	sub	sp, #64	@ 0x40
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0318 	add.w	r3, r7, #24
 8000362:	2228      	movs	r2, #40	@ 0x28
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f002 ff85 	bl	8003276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	611a      	str	r2, [r3, #16]

  /** Configura el Oscilador Principal y el PLL */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800037a:	2301      	movs	r3, #1
 800037c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000382:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000384:	2302      	movs	r3, #2
 8000386:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000388:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800038c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800038e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000392:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	f107 0318 	add.w	r3, r7, #24
 800039c:	4618      	mov	r0, r3
 800039e:	f000 fc9f 	bl	8000ce0 <HAL_RCC_OscConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80003a8:	f000 f819 	bl	80003de <Error_Handler>
  }

  /** Configura los buses AHB y APB */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80003ac:	230f      	movs	r3, #15
 80003ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b0:	2302      	movs	r3, #2
 80003b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2102      	movs	r1, #2
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 fcde 	bl	8001d88 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003d2:	f000 f804 	bl	80003de <Error_Handler>
  }
}
 80003d6:	bf00      	nop
 80003d8:	3740      	adds	r7, #64	@ 0x40
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <Error_Handler>:

/* Error Handler */
void Error_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e2:	b672      	cpsid	i
}
 80003e4:	bf00      	nop
  __disable_irq();
  while (1)
 80003e6:	bf00      	nop
 80003e8:	e7fd      	b.n	80003e6 <Error_Handler+0x8>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <HAL_MspInit+0x44>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000430 <HAL_MspInit+0x44>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <HAL_MspInit+0x44>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <HAL_MspInit+0x44>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a08      	ldr	r2, [pc, #32]	@ (8000430 <HAL_MspInit+0x44>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <HAL_MspInit+0x44>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000422:	2007      	movs	r0, #7
 8000424:	f000 f9fc 	bl	8000820 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000

08000434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b08a      	sub	sp, #40	@ 0x28
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a1b      	ldr	r2, [pc, #108]	@ (80004c0 <HAL_UART_MspInit+0x8c>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d130      	bne.n	80004b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000456:	4b1b      	ldr	r3, [pc, #108]	@ (80004c4 <HAL_UART_MspInit+0x90>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a1a      	ldr	r2, [pc, #104]	@ (80004c4 <HAL_UART_MspInit+0x90>)
 800045c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <HAL_UART_MspInit+0x90>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800046a:	613b      	str	r3, [r7, #16]
 800046c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046e:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <HAL_UART_MspInit+0x90>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a14      	ldr	r2, [pc, #80]	@ (80004c4 <HAL_UART_MspInit+0x90>)
 8000474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <HAL_UART_MspInit+0x90>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000486:	230c      	movs	r3, #12
 8000488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048a:	2302      	movs	r3, #2
 800048c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000492:	2300      	movs	r3, #0
 8000494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000496:	2307      	movs	r3, #7
 8000498:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4619      	mov	r1, r3
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a4:	f000 fa7a 	bl	800099c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2100      	movs	r1, #0
 80004ac:	2026      	movs	r0, #38	@ 0x26
 80004ae:	f000 f9c2 	bl	8000836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004b2:	2026      	movs	r0, #38	@ 0x26
 80004b4:	f000 f9db 	bl	800086e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80004b8:	bf00      	nop
 80004ba:	3728      	adds	r7, #40	@ 0x28
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40004400 	.word	0x40004400
 80004c4:	40021000 	.word	0x40021000

080004c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <NMI_Handler+0x4>

080004d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <MemManage_Handler+0x4>

080004e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <UsageFault_Handler+0x4>

080004f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051e:	f000 f88f 	bl	8000640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800052c:	4802      	ldr	r0, [pc, #8]	@ (8000538 <USART2_IRQHandler+0x10>)
 800052e:	f001 ff63 	bl	80023f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028

0800053c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <SystemInit+0x20>)
 8000542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000546:	4a05      	ldr	r2, [pc, #20]	@ (800055c <SystemInit+0x20>)
 8000548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800054c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000598 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000564:	f7ff ffea 	bl	800053c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000568:	480c      	ldr	r0, [pc, #48]	@ (800059c <LoopForever+0x6>)
  ldr r1, =_edata
 800056a:	490d      	ldr	r1, [pc, #52]	@ (80005a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800056c:	4a0d      	ldr	r2, [pc, #52]	@ (80005a4 <LoopForever+0xe>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000570:	e002      	b.n	8000578 <LoopCopyDataInit>

08000572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000576:	3304      	adds	r3, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800057c:	d3f9      	bcc.n	8000572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000580:	4c0a      	ldr	r4, [pc, #40]	@ (80005ac <LoopForever+0x16>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000584:	e001      	b.n	800058a <LoopFillZerobss>

08000586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000588:	3204      	adds	r2, #4

0800058a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800058c:	d3fb      	bcc.n	8000586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800058e:	f002 fe8d 	bl	80032ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000592:	f7ff fe1f 	bl	80001d4 <main>

08000596 <LoopForever>:

LoopForever:
    b LoopForever
 8000596:	e7fe      	b.n	8000596 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000598:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800059c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005a4:	08003354 	.word	0x08003354
  ldr r2, =_sbss
 80005a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005ac:	200000bc 	.word	0x200000bc

080005b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC1_2_IRQHandler>
	...

080005b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b8:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <HAL_Init+0x28>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <HAL_Init+0x28>)
 80005be:	f043 0310 	orr.w	r3, r3, #16
 80005c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f92b 	bl	8000820 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f808 	bl	80005e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d0:	f7ff ff0c 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40022000 	.word	0x40022000

080005e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <HAL_InitTick+0x54>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <HAL_InitTick+0x58>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f943 	bl	800088a <HAL_SYSTICK_Config>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	e00e      	b.n	800062c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	d80a      	bhi.n	800062a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000614:	2200      	movs	r2, #0
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	f04f 30ff 	mov.w	r0, #4294967295
 800061c:	f000 f90b 	bl	8000836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000620:	4a06      	ldr	r2, [pc, #24]	@ (800063c <HAL_InitTick+0x5c>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000626:	2300      	movs	r3, #0
 8000628:	e000      	b.n	800062c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000000 	.word	0x20000000
 8000638:	20000008 	.word	0x20000008
 800063c:	20000004 	.word	0x20000004

08000640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <HAL_IncTick+0x20>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_IncTick+0x24>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <HAL_IncTick+0x24>)
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000008 	.word	0x20000008
 8000664:	200000b8 	.word	0x200000b8

08000668 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;  
 800066c:	4b03      	ldr	r3, [pc, #12]	@ (800067c <HAL_GetTick+0x14>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	200000b8 	.word	0x200000b8

08000680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f003 0307 	and.w	r3, r3, #7
 800068e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006b2:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <__NVIC_SetPriorityGrouping+0x44>)
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	60d3      	str	r3, [r2, #12]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006cc:	4b04      	ldr	r3, [pc, #16]	@ (80006e0 <__NVIC_GetPriorityGrouping+0x18>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	f003 0307 	and.w	r3, r3, #7
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	db0b      	blt.n	800070e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f003 021f 	and.w	r2, r3, #31
 80006fc:	4907      	ldr	r1, [pc, #28]	@ (800071c <__NVIC_EnableIRQ+0x38>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	095b      	lsrs	r3, r3, #5
 8000704:	2001      	movs	r0, #1
 8000706:	fa00 f202 	lsl.w	r2, r0, r2
 800070a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000e100 	.word	0xe000e100

08000720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000730:	2b00      	cmp	r3, #0
 8000732:	db0a      	blt.n	800074a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	b2da      	uxtb	r2, r3
 8000738:	490c      	ldr	r1, [pc, #48]	@ (800076c <__NVIC_SetPriority+0x4c>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	0112      	lsls	r2, r2, #4
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	440b      	add	r3, r1
 8000744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000748:	e00a      	b.n	8000760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4908      	ldr	r1, [pc, #32]	@ (8000770 <__NVIC_SetPriority+0x50>)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	3b04      	subs	r3, #4
 8000758:	0112      	lsls	r2, r2, #4
 800075a:	b2d2      	uxtb	r2, r2
 800075c:	440b      	add	r3, r1
 800075e:	761a      	strb	r2, [r3, #24]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000e100 	.word	0xe000e100
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000774:	b480      	push	{r7}
 8000776:	b089      	sub	sp, #36	@ 0x24
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	f1c3 0307 	rsb	r3, r3, #7
 800078e:	2b04      	cmp	r3, #4
 8000790:	bf28      	it	cs
 8000792:	2304      	movcs	r3, #4
 8000794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3304      	adds	r3, #4
 800079a:	2b06      	cmp	r3, #6
 800079c:	d902      	bls.n	80007a4 <NVIC_EncodePriority+0x30>
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3b03      	subs	r3, #3
 80007a2:	e000      	b.n	80007a6 <NVIC_EncodePriority+0x32>
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	43da      	mvns	r2, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	401a      	ands	r2, r3
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007bc:	f04f 31ff 	mov.w	r1, #4294967295
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43d9      	mvns	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	4313      	orrs	r3, r2
         );
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3724      	adds	r7, #36	@ 0x24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
	...

080007dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007ec:	d301      	bcc.n	80007f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ee:	2301      	movs	r3, #1
 80007f0:	e00f      	b.n	8000812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <SysTick_Config+0x40>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007fa:	210f      	movs	r1, #15
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	f7ff ff8e 	bl	8000720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000804:	4b05      	ldr	r3, [pc, #20]	@ (800081c <SysTick_Config+0x40>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800080a:	4b04      	ldr	r3, [pc, #16]	@ (800081c <SysTick_Config+0x40>)
 800080c:	2207      	movs	r2, #7
 800080e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	e000e010 	.word	0xe000e010

08000820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ff29 	bl	8000680 <__NVIC_SetPriorityGrouping>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000848:	f7ff ff3e 	bl	80006c8 <__NVIC_GetPriorityGrouping>
 800084c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	68b9      	ldr	r1, [r7, #8]
 8000852:	6978      	ldr	r0, [r7, #20]
 8000854:	f7ff ff8e 	bl	8000774 <NVIC_EncodePriority>
 8000858:	4602      	mov	r2, r0
 800085a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff5d 	bl	8000720 <__NVIC_SetPriority>
}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff31 	bl	80006e4 <__NVIC_EnableIRQ>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ffa2 	bl	80007dc <SysTick_Config>
 8000898:	4603      	mov	r3, r0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d101      	bne.n	80008b4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e02e      	b.n	8000912 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d008      	beq.n	80008d0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2204      	movs	r2, #4
 80008c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e020      	b.n	8000912 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f022 020e 	bic.w	r2, r2, #14
 80008de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f022 0201 	bic.w	r2, r2, #1
 80008ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008f8:	2101      	movs	r1, #1
 80008fa:	fa01 f202 	lsl.w	r2, r1, r2
 80008fe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2201      	movs	r2, #1
 8000904:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b084      	sub	sp, #16
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000930:	2b02      	cmp	r3, #2
 8000932:	d005      	beq.n	8000940 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2204      	movs	r2, #4
 8000938:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	e027      	b.n	8000990 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f022 020e 	bic.w	r2, r2, #14
 800094e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f022 0201 	bic.w	r2, r2, #1
 800095e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000968:	2101      	movs	r1, #1
 800096a:	fa01 f202 	lsl.w	r2, r1, r2
 800096e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2201      	movs	r2, #1
 8000974:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000984:	2b00      	cmp	r3, #0
 8000986:	d003      	beq.n	8000990 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	4798      	blx	r3
    }
  }
  return status;
 8000990:	7bfb      	ldrb	r3, [r7, #15]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	b480      	push	{r7}
 800099e:	b087      	sub	sp, #28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009aa:	e160      	b.n	8000c6e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	2101      	movs	r1, #1
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 8152 	beq.w	8000c68 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d005      	beq.n	80009dc <HAL_GPIO_Init+0x40>
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d130      	bne.n	8000a3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	2203      	movs	r2, #3
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a12:	2201      	movs	r2, #1
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	091b      	lsrs	r3, r3, #4
 8000a28:	f003 0201 	and.w	r2, r3, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f003 0303 	and.w	r3, r3, #3
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d017      	beq.n	8000a7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 0303 	and.w	r3, r3, #3
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d123      	bne.n	8000ace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	08da      	lsrs	r2, r3, #3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3208      	adds	r2, #8
 8000a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	220f      	movs	r2, #15
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	691a      	ldr	r2, [r3, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	f003 0307 	and.w	r3, r3, #7
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	08da      	lsrs	r2, r3, #3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3208      	adds	r2, #8
 8000ac8:	6939      	ldr	r1, [r7, #16]
 8000aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 0203 	and.w	r2, r3, #3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 80ac 	beq.w	8000c68 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b10:	4b5e      	ldr	r3, [pc, #376]	@ (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a5d      	ldr	r2, [pc, #372]	@ (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b5b      	ldr	r3, [pc, #364]	@ (8000c8c <HAL_GPIO_Init+0x2f0>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b28:	4a59      	ldr	r2, [pc, #356]	@ (8000c90 <HAL_GPIO_Init+0x2f4>)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	3302      	adds	r3, #2
 8000b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	220f      	movs	r2, #15
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b52:	d025      	beq.n	8000ba0 <HAL_GPIO_Init+0x204>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a4f      	ldr	r2, [pc, #316]	@ (8000c94 <HAL_GPIO_Init+0x2f8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d01f      	beq.n	8000b9c <HAL_GPIO_Init+0x200>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8000c98 <HAL_GPIO_Init+0x2fc>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d019      	beq.n	8000b98 <HAL_GPIO_Init+0x1fc>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a4d      	ldr	r2, [pc, #308]	@ (8000c9c <HAL_GPIO_Init+0x300>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d013      	beq.n	8000b94 <HAL_GPIO_Init+0x1f8>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a4c      	ldr	r2, [pc, #304]	@ (8000ca0 <HAL_GPIO_Init+0x304>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d00d      	beq.n	8000b90 <HAL_GPIO_Init+0x1f4>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a4b      	ldr	r2, [pc, #300]	@ (8000ca4 <HAL_GPIO_Init+0x308>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d007      	beq.n	8000b8c <HAL_GPIO_Init+0x1f0>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a4a      	ldr	r2, [pc, #296]	@ (8000ca8 <HAL_GPIO_Init+0x30c>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d101      	bne.n	8000b88 <HAL_GPIO_Init+0x1ec>
 8000b84:	2306      	movs	r3, #6
 8000b86:	e00c      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000b88:	2307      	movs	r3, #7
 8000b8a:	e00a      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000b8c:	2305      	movs	r3, #5
 8000b8e:	e008      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000b90:	2304      	movs	r3, #4
 8000b92:	e006      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000b94:	2303      	movs	r3, #3
 8000b96:	e004      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000b98:	2302      	movs	r3, #2
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <HAL_GPIO_Init+0x206>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	f002 0203 	and.w	r2, r2, #3
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	4093      	lsls	r3, r2
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bb2:	4937      	ldr	r1, [pc, #220]	@ (8000c90 <HAL_GPIO_Init+0x2f4>)
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	3302      	adds	r3, #2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000be4:	4a31      	ldr	r2, [pc, #196]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bea:	4b30      	ldr	r3, [pc, #192]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c0e:	4a27      	ldr	r2, [pc, #156]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c14:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c38:	4a1c      	ldr	r2, [pc, #112]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c62:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <HAL_GPIO_Init+0x310>)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa22 f303 	lsr.w	r3, r2, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f47f ae97 	bne.w	80009ac <HAL_GPIO_Init+0x10>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010000 	.word	0x40010000
 8000c94:	48000400 	.word	0x48000400
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	48000c00 	.word	0x48000c00
 8000ca0:	48001000 	.word	0x48001000
 8000ca4:	48001400 	.word	0x48001400
 8000ca8:	48001800 	.word	0x48001800
 8000cac:	40010400 	.word	0x40010400

08000cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	807b      	strh	r3, [r7, #2]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cc0:	787b      	ldrb	r3, [r7, #1]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ccc:	e002      	b.n	8000cd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cce:	887a      	ldrh	r2, [r7, #2]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cf0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f001 b83a 	b.w	8001d7a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 816f 	beq.w	8000ffa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d1c:	4bb5      	ldr	r3, [pc, #724]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 030c 	and.w	r3, r3, #12
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	d00c      	beq.n	8000d42 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d28:	4bb2      	ldr	r3, [pc, #712]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	d15c      	bne.n	8000dee <HAL_RCC_OscConfig+0x10e>
 8000d34:	4baf      	ldr	r3, [pc, #700]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d40:	d155      	bne.n	8000dee <HAL_RCC_OscConfig+0x10e>
 8000d42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d46:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000d4e:	fa93 f3a3 	rbit	r3, r3
 8000d52:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5a:	fab3 f383 	clz	r3, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	095b      	lsrs	r3, r3, #5
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d102      	bne.n	8000d74 <HAL_RCC_OscConfig+0x94>
 8000d6e:	4ba1      	ldr	r3, [pc, #644]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	e015      	b.n	8000da0 <HAL_RCC_OscConfig+0xc0>
 8000d74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d78:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d80:	fa93 f3a3 	rbit	r3, r3
 8000d84:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d8c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000d90:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000d94:	fa93 f3a3 	rbit	r3, r3
 8000d98:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000d9c:	4b95      	ldr	r3, [pc, #596]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000da4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000da8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000dac:	fa92 f2a2 	rbit	r2, r2
 8000db0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000db4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	f042 0220 	orr.w	r2, r2, #32
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	f002 021f 	and.w	r2, r2, #31
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fa01 f202 	lsl.w	r2, r1, r2
 8000dce:	4013      	ands	r3, r2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 8111 	beq.w	8000ff8 <HAL_RCC_OscConfig+0x318>
 8000dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8108 	bne.w	8000ff8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f000 bfc6 	b.w	8001d7a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000df2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dfe:	d106      	bne.n	8000e0e <HAL_RCC_OscConfig+0x12e>
 8000e00:	4b7c      	ldr	r3, [pc, #496]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a7b      	ldr	r2, [pc, #492]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	e036      	b.n	8000e7c <HAL_RCC_OscConfig+0x19c>
 8000e0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x158>
 8000e1e:	4b75      	ldr	r3, [pc, #468]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a74      	ldr	r2, [pc, #464]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b72      	ldr	r3, [pc, #456]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a71      	ldr	r2, [pc, #452]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e021      	b.n	8000e7c <HAL_RCC_OscConfig+0x19c>
 8000e38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x184>
 8000e4a:	4b6a      	ldr	r3, [pc, #424]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a69      	ldr	r2, [pc, #420]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	4b67      	ldr	r3, [pc, #412]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a66      	ldr	r2, [pc, #408]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e00b      	b.n	8000e7c <HAL_RCC_OscConfig+0x19c>
 8000e64:	4b63      	ldr	r3, [pc, #396]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a62      	ldr	r2, [pc, #392]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	4b60      	ldr	r3, [pc, #384]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a5f      	ldr	r2, [pc, #380]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e7a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d059      	beq.n	8000f40 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fbec 	bl	8000668 <HAL_GetTick>
 8000e90:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e94:	e00a      	b.n	8000eac <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e96:	f7ff fbe7 	bl	8000668 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b64      	cmp	r3, #100	@ 0x64
 8000ea4:	d902      	bls.n	8000eac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	f000 bf67 	b.w	8001d7a <HAL_RCC_OscConfig+0x109a>
 8000eac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eb0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000eb8:	fa93 f3a3 	rbit	r3, r3
 8000ebc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000ec0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec4:	fab3 f383 	clz	r3, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d102      	bne.n	8000ede <HAL_RCC_OscConfig+0x1fe>
 8000ed8:	4b46      	ldr	r3, [pc, #280]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	e015      	b.n	8000f0a <HAL_RCC_OscConfig+0x22a>
 8000ede:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ee2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000eea:	fa93 f3a3 	rbit	r3, r3
 8000eee:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000ef2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ef6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000efa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000efe:	fa93 f3a3 	rbit	r3, r3
 8000f02:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f06:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f0e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000f12:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000f16:	fa92 f2a2 	rbit	r2, r2
 8000f1a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000f1e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f22:	fab2 f282 	clz	r2, r2
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	f042 0220 	orr.w	r2, r2, #32
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	f002 021f 	and.w	r2, r2, #31
 8000f32:	2101      	movs	r1, #1
 8000f34:	fa01 f202 	lsl.w	r2, r1, r2
 8000f38:	4013      	ands	r3, r2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0ab      	beq.n	8000e96 <HAL_RCC_OscConfig+0x1b6>
 8000f3e:	e05c      	b.n	8000ffa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fb92 	bl	8000668 <HAL_GetTick>
 8000f44:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f48:	e00a      	b.n	8000f60 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fb8d 	bl	8000668 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b64      	cmp	r3, #100	@ 0x64
 8000f58:	d902      	bls.n	8000f60 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	f000 bf0d 	b.w	8001d7a <HAL_RCC_OscConfig+0x109a>
 8000f60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f64:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000f74:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d102      	bne.n	8000f92 <HAL_RCC_OscConfig+0x2b2>
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	e015      	b.n	8000fbe <HAL_RCC_OscConfig+0x2de>
 8000f92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f96:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000f9e:	fa93 f3a3 	rbit	r3, r3
 8000fa2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000fa6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000faa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000fae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <HAL_RCC_OscConfig+0x314>)
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fbe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fc2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000fc6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000fca:	fa92 f2a2 	rbit	r2, r2
 8000fce:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000fd2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000fd6:	fab2 f282 	clz	r2, r2
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	f042 0220 	orr.w	r2, r2, #32
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	f002 021f 	and.w	r2, r2, #31
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1ab      	bne.n	8000f4a <HAL_RCC_OscConfig+0x26a>
 8000ff2:	e002      	b.n	8000ffa <HAL_RCC_OscConfig+0x31a>
 8000ff4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ffe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 817f 	beq.w	800130e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001010:	4ba7      	ldr	r3, [pc, #668]	@ (80012b0 <HAL_RCC_OscConfig+0x5d0>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00c      	beq.n	8001036 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800101c:	4ba4      	ldr	r3, [pc, #656]	@ (80012b0 <HAL_RCC_OscConfig+0x5d0>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b08      	cmp	r3, #8
 8001026:	d173      	bne.n	8001110 <HAL_RCC_OscConfig+0x430>
 8001028:	4ba1      	ldr	r3, [pc, #644]	@ (80012b0 <HAL_RCC_OscConfig+0x5d0>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001034:	d16c      	bne.n	8001110 <HAL_RCC_OscConfig+0x430>
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001048:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104c:	fab3 f383 	clz	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	b2db      	uxtb	r3, r3
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d102      	bne.n	8001066 <HAL_RCC_OscConfig+0x386>
 8001060:	4b93      	ldr	r3, [pc, #588]	@ (80012b0 <HAL_RCC_OscConfig+0x5d0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	e013      	b.n	800108e <HAL_RCC_OscConfig+0x3ae>
 8001066:	2302      	movs	r3, #2
 8001068:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001070:	fa93 f3a3 	rbit	r3, r3
 8001074:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800107e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800108a:	4b89      	ldr	r3, [pc, #548]	@ (80012b0 <HAL_RCC_OscConfig+0x5d0>)
 800108c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108e:	2202      	movs	r2, #2
 8001090:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001094:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001098:	fa92 f2a2 	rbit	r2, r2
 800109c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80010a0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80010a4:	fab2 f282 	clz	r2, r2
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	f042 0220 	orr.w	r2, r2, #32
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	f002 021f 	and.w	r2, r2, #31
 80010b4:	2101      	movs	r1, #1
 80010b6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00a      	beq.n	80010d6 <HAL_RCC_OscConfig+0x3f6>
 80010c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d002      	beq.n	80010d6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	f000 be52 	b.w	8001d7a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d6:	4b76      	ldr	r3, [pc, #472]	@ (80012b0 <HAL_RCC_OscConfig+0x5d0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	21f8      	movs	r1, #248	@ 0xf8
 80010ec:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80010f4:	fa91 f1a1 	rbit	r1, r1
 80010f8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80010fc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001100:	fab1 f181 	clz	r1, r1
 8001104:	b2c9      	uxtb	r1, r1
 8001106:	408b      	lsls	r3, r1
 8001108:	4969      	ldr	r1, [pc, #420]	@ (80012b0 <HAL_RCC_OscConfig+0x5d0>)
 800110a:	4313      	orrs	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110e:	e0fe      	b.n	800130e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001110:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001114:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 8088 	beq.w	8001232 <HAL_RCC_OscConfig+0x552>
 8001122:	2301      	movs	r3, #1
 8001124:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800112c:	fa93 f3a3 	rbit	r3, r3
 8001130:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001134:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001138:	fab3 f383 	clz	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001142:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	461a      	mov	r2, r3
 800114a:	2301      	movs	r3, #1
 800114c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fa8b 	bl	8000668 <HAL_GetTick>
 8001152:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	e00a      	b.n	800116e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001158:	f7ff fa86 	bl	8000668 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d902      	bls.n	800116e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	f000 be06 	b.w	8001d7a <HAL_RCC_OscConfig+0x109a>
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001180:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	fab3 f383 	clz	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d102      	bne.n	800119e <HAL_RCC_OscConfig+0x4be>
 8001198:	4b45      	ldr	r3, [pc, #276]	@ (80012b0 <HAL_RCC_OscConfig+0x5d0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	e013      	b.n	80011c6 <HAL_RCC_OscConfig+0x4e6>
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80011a8:	fa93 f3a3 	rbit	r3, r3
 80011ac:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80011b0:	2302      	movs	r3, #2
 80011b2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80011b6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80011c2:	4b3b      	ldr	r3, [pc, #236]	@ (80012b0 <HAL_RCC_OscConfig+0x5d0>)
 80011c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c6:	2202      	movs	r2, #2
 80011c8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80011cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80011d0:	fa92 f2a2 	rbit	r2, r2
 80011d4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80011d8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80011dc:	fab2 f282 	clz	r2, r2
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	f042 0220 	orr.w	r2, r2, #32
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	f002 021f 	and.w	r2, r2, #31
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0af      	beq.n	8001158 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <HAL_RCC_OscConfig+0x5d0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001204:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	21f8      	movs	r1, #248	@ 0xf8
 800120e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001216:	fa91 f1a1 	rbit	r1, r1
 800121a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800121e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001222:	fab1 f181 	clz	r1, r1
 8001226:	b2c9      	uxtb	r1, r1
 8001228:	408b      	lsls	r3, r1
 800122a:	4921      	ldr	r1, [pc, #132]	@ (80012b0 <HAL_RCC_OscConfig+0x5d0>)
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
 8001230:	e06d      	b.n	800130e <HAL_RCC_OscConfig+0x62e>
 8001232:	2301      	movs	r3, #1
 8001234:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001238:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800123c:	fa93 f3a3 	rbit	r3, r3
 8001240:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001244:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001248:	fab3 f383 	clz	r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001252:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	461a      	mov	r2, r3
 800125a:	2300      	movs	r3, #0
 800125c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125e:	f7ff fa03 	bl	8000668 <HAL_GetTick>
 8001262:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	e00a      	b.n	800127e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001268:	f7ff f9fe 	bl	8000668 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d902      	bls.n	800127e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	f000 bd7e 	b.w	8001d7a <HAL_RCC_OscConfig+0x109a>
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001290:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d105      	bne.n	80012b4 <HAL_RCC_OscConfig+0x5d4>
 80012a8:	4b01      	ldr	r3, [pc, #4]	@ (80012b0 <HAL_RCC_OscConfig+0x5d0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	e016      	b.n	80012dc <HAL_RCC_OscConfig+0x5fc>
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80012cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012d0:	fa93 f3a3 	rbit	r3, r3
 80012d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80012d8:	4bbf      	ldr	r3, [pc, #764]	@ (80015d8 <HAL_RCC_OscConfig+0x8f8>)
 80012da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012dc:	2202      	movs	r2, #2
 80012de:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80012e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80012e6:	fa92 f2a2 	rbit	r2, r2
 80012ea:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80012ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80012f2:	fab2 f282 	clz	r2, r2
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	f042 0220 	orr.w	r2, r2, #32
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	f002 021f 	and.w	r2, r2, #31
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f202 	lsl.w	r2, r1, r2
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1ac      	bne.n	8001268 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001312:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8113 	beq.w	800154a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001328:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d07c      	beq.n	800142e <HAL_RCC_OscConfig+0x74e>
 8001334:	2301      	movs	r3, #1
 8001336:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001346:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	4ba2      	ldr	r3, [pc, #648]	@ (80015dc <HAL_RCC_OscConfig+0x8fc>)
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	461a      	mov	r2, r3
 800135a:	2301      	movs	r3, #1
 800135c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135e:	f7ff f983 	bl	8000668 <HAL_GetTick>
 8001362:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001366:	e00a      	b.n	800137e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001368:	f7ff f97e 	bl	8000668 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d902      	bls.n	800137e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	f000 bcfe 	b.w	8001d7a <HAL_RCC_OscConfig+0x109a>
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001388:	fa93 f2a3 	rbit	r2, r3
 800138c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001390:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800139a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800139e:	2202      	movs	r2, #2
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	fa93 f2a3 	rbit	r2, r3
 80013b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013c2:	2202      	movs	r2, #2
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	fa93 f2a3 	rbit	r2, r3
 80013d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	4b7e      	ldr	r3, [pc, #504]	@ (80015d8 <HAL_RCC_OscConfig+0x8f8>)
 80013e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013ea:	2102      	movs	r1, #2
 80013ec:	6019      	str	r1, [r3, #0]
 80013ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	fa93 f1a3 	rbit	r1, r3
 80013fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001400:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001404:	6019      	str	r1, [r3, #0]
  return result;
 8001406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800140a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	fab3 f383 	clz	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	4013      	ands	r3, r2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d09d      	beq.n	8001368 <HAL_RCC_OscConfig+0x688>
 800142c:	e08d      	b.n	800154a <HAL_RCC_OscConfig+0x86a>
 800142e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001432:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800143e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800144c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001450:	601a      	str	r2, [r3, #0]
  return result;
 8001452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001456:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800145a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	461a      	mov	r2, r3
 8001464:	4b5d      	ldr	r3, [pc, #372]	@ (80015dc <HAL_RCC_OscConfig+0x8fc>)
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	461a      	mov	r2, r3
 800146c:	2300      	movs	r3, #0
 800146e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff f8fa 	bl	8000668 <HAL_GetTick>
 8001474:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff f8f5 	bl	8000668 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d902      	bls.n	8001490 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	f000 bc75 	b.w	8001d7a <HAL_RCC_OscConfig+0x109a>
 8001490:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001494:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001498:	2202      	movs	r2, #2
 800149a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fa93 f2a3 	rbit	r2, r3
 80014aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014bc:	2202      	movs	r2, #2
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	fa93 f2a3 	rbit	r2, r3
 80014ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014e0:	2202      	movs	r2, #2
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	fa93 f2a3 	rbit	r2, r3
 80014f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	4b36      	ldr	r3, [pc, #216]	@ (80015d8 <HAL_RCC_OscConfig+0x8f8>)
 80014fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001504:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001508:	2102      	movs	r1, #2
 800150a:	6019      	str	r1, [r3, #0]
 800150c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001510:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	fa93 f1a3 	rbit	r1, r3
 800151a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800151e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001522:	6019      	str	r1, [r3, #0]
  return result;
 8001524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001528:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	2101      	movs	r1, #1
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d197      	bne.n	800147a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800154e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 81a5 	beq.w	80018aa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001566:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <HAL_RCC_OscConfig+0x8f8>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d116      	bne.n	80015a0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <HAL_RCC_OscConfig+0x8f8>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a18      	ldr	r2, [pc, #96]	@ (80015d8 <HAL_RCC_OscConfig+0x8f8>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <HAL_RCC_OscConfig+0x8f8>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001586:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800158a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001594:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001598:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800159a:	2301      	movs	r3, #1
 800159c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a0:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <HAL_RCC_OscConfig+0x900>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d121      	bne.n	80015f0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_RCC_OscConfig+0x900>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0b      	ldr	r2, [pc, #44]	@ (80015e0 <HAL_RCC_OscConfig+0x900>)
 80015b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b8:	f7ff f856 	bl	8000668 <HAL_GetTick>
 80015bc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	e010      	b.n	80015e4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c2:	f7ff f851 	bl	8000668 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	@ 0x64
 80015d0:	d908      	bls.n	80015e4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e3d1      	b.n	8001d7a <HAL_RCC_OscConfig+0x109a>
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	10908120 	.word	0x10908120
 80015e0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	4b8d      	ldr	r3, [pc, #564]	@ (800181c <HAL_RCC_OscConfig+0xb3c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0e8      	beq.n	80015c2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x92e>
 8001600:	4b87      	ldr	r3, [pc, #540]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4a86      	ldr	r2, [pc, #536]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6213      	str	r3, [r2, #32]
 800160c:	e035      	b.n	800167a <HAL_RCC_OscConfig+0x99a>
 800160e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001612:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x958>
 800161e:	4b80      	ldr	r3, [pc, #512]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a7f      	ldr	r2, [pc, #508]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	6213      	str	r3, [r2, #32]
 800162a:	4b7d      	ldr	r3, [pc, #500]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a7c      	ldr	r2, [pc, #496]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001630:	f023 0304 	bic.w	r3, r3, #4
 8001634:	6213      	str	r3, [r2, #32]
 8001636:	e020      	b.n	800167a <HAL_RCC_OscConfig+0x99a>
 8001638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800163c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b05      	cmp	r3, #5
 8001646:	d10c      	bne.n	8001662 <HAL_RCC_OscConfig+0x982>
 8001648:	4b75      	ldr	r3, [pc, #468]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a74      	ldr	r2, [pc, #464]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6213      	str	r3, [r2, #32]
 8001654:	4b72      	ldr	r3, [pc, #456]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a71      	ldr	r2, [pc, #452]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6213      	str	r3, [r2, #32]
 8001660:	e00b      	b.n	800167a <HAL_RCC_OscConfig+0x99a>
 8001662:	4b6f      	ldr	r3, [pc, #444]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a6e      	ldr	r2, [pc, #440]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6213      	str	r3, [r2, #32]
 800166e:	4b6c      	ldr	r3, [pc, #432]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a6b      	ldr	r2, [pc, #428]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8081 	beq.w	800178e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7fe ffec 	bl	8000668 <HAL_GetTick>
 8001690:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	e00b      	b.n	80016ae <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7fe ffe7 	bl	8000668 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e365      	b.n	8001d7a <HAL_RCC_OscConfig+0x109a>
 80016ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016b6:	2202      	movs	r2, #2
 80016b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016be:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	fa93 f2a3 	rbit	r2, r3
 80016c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016d6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016da:	2202      	movs	r2, #2
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	fa93 f2a3 	rbit	r2, r3
 80016ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016f4:	601a      	str	r2, [r3, #0]
  return result;
 80016f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016fa:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80016fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d102      	bne.n	800171a <HAL_RCC_OscConfig+0xa3a>
 8001714:	4b42      	ldr	r3, [pc, #264]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	e013      	b.n	8001742 <HAL_RCC_OscConfig+0xa62>
 800171a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800171e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001722:	2202      	movs	r2, #2
 8001724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	fa93 f2a3 	rbit	r2, r3
 8001734:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001738:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	4b38      	ldr	r3, [pc, #224]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001746:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800174a:	2102      	movs	r1, #2
 800174c:	6011      	str	r1, [r2, #0]
 800174e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001752:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	fa92 f1a2 	rbit	r1, r2
 800175c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001760:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001764:	6011      	str	r1, [r2, #0]
  return result;
 8001766:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800176a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	fab2 f282 	clz	r2, r2
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	f002 021f 	and.w	r2, r2, #31
 8001780:	2101      	movs	r1, #1
 8001782:	fa01 f202 	lsl.w	r2, r1, r2
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d084      	beq.n	8001696 <HAL_RCC_OscConfig+0x9b6>
 800178c:	e083      	b.n	8001896 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7fe ff6b 	bl	8000668 <HAL_GetTick>
 8001792:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001796:	e00b      	b.n	80017b0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001798:	f7fe ff66 	bl	8000668 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e2e4      	b.n	8001d7a <HAL_RCC_OscConfig+0x109a>
 80017b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017b8:	2202      	movs	r2, #2
 80017ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fa93 f2a3 	rbit	r2, r3
 80017ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ce:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017dc:	2202      	movs	r2, #2
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	fa93 f2a3 	rbit	r2, r3
 80017ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80017f6:	601a      	str	r2, [r3, #0]
  return result;
 80017f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017fc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001800:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001802:	fab3 f383 	clz	r3, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	095b      	lsrs	r3, r3, #5
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d106      	bne.n	8001824 <HAL_RCC_OscConfig+0xb44>
 8001816:	4b02      	ldr	r3, [pc, #8]	@ (8001820 <HAL_RCC_OscConfig+0xb40>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	e017      	b.n	800184c <HAL_RCC_OscConfig+0xb6c>
 800181c:	40007000 	.word	0x40007000
 8001820:	40021000 	.word	0x40021000
 8001824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001828:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800182c:	2202      	movs	r2, #2
 800182e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001834:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	fa93 f2a3 	rbit	r2, r3
 800183e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001842:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	4bb3      	ldr	r3, [pc, #716]	@ (8001b18 <HAL_RCC_OscConfig+0xe38>)
 800184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001850:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001854:	2102      	movs	r1, #2
 8001856:	6011      	str	r1, [r2, #0]
 8001858:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800185c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	fa92 f1a2 	rbit	r1, r2
 8001866:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800186a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800186e:	6011      	str	r1, [r2, #0]
  return result;
 8001870:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001874:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	fab2 f282 	clz	r2, r2
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	f002 021f 	and.w	r2, r2, #31
 800188a:	2101      	movs	r1, #1
 800188c:	fa01 f202 	lsl.w	r2, r1, r2
 8001890:	4013      	ands	r3, r2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d180      	bne.n	8001798 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001896:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800189a:	2b01      	cmp	r3, #1
 800189c:	d105      	bne.n	80018aa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189e:	4b9e      	ldr	r3, [pc, #632]	@ (8001b18 <HAL_RCC_OscConfig+0xe38>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a9d      	ldr	r2, [pc, #628]	@ (8001b18 <HAL_RCC_OscConfig+0xe38>)
 80018a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018a8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 825e 	beq.w	8001d78 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018bc:	4b96      	ldr	r3, [pc, #600]	@ (8001b18 <HAL_RCC_OscConfig+0xe38>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	f000 821f 	beq.w	8001d08 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	f040 8170 	bne.w	8001bbc <HAL_RCC_OscConfig+0xedc>
 80018dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ee:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	fa93 f2a3 	rbit	r2, r3
 80018f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018fc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001900:	601a      	str	r2, [r3, #0]
  return result;
 8001902:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001906:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800190a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190c:	fab3 f383 	clz	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001916:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	461a      	mov	r2, r3
 800191e:	2300      	movs	r3, #0
 8001920:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7fe fea1 	bl	8000668 <HAL_GetTick>
 8001926:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192a:	e009      	b.n	8001940 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192c:	f7fe fe9c 	bl	8000668 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e21c      	b.n	8001d7a <HAL_RCC_OscConfig+0x109a>
 8001940:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001944:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001948:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800194c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001952:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	fa93 f2a3 	rbit	r2, r3
 800195c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001960:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001964:	601a      	str	r2, [r3, #0]
  return result;
 8001966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800196e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0xcaa>
 8001984:	4b64      	ldr	r3, [pc, #400]	@ (8001b18 <HAL_RCC_OscConfig+0xe38>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	e027      	b.n	80019da <HAL_RCC_OscConfig+0xcfa>
 800198a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001992:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019aa:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80019b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	4b50      	ldr	r3, [pc, #320]	@ (8001b18 <HAL_RCC_OscConfig+0xe38>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019de:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019e6:	6011      	str	r1, [r2, #0]
 80019e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019ec:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	fa92 f1a2 	rbit	r1, r2
 80019f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019fa:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80019fe:	6011      	str	r1, [r2, #0]
  return result;
 8001a00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a04:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	fab2 f282 	clz	r2, r2
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	f042 0220 	orr.w	r2, r2, #32
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	f002 021f 	and.w	r2, r2, #31
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d182      	bne.n	800192c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a26:	4b3c      	ldr	r3, [pc, #240]	@ (8001b18 <HAL_RCC_OscConfig+0xe38>)
 8001a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2a:	f023 020f 	bic.w	r2, r3, #15
 8001a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	4937      	ldr	r1, [pc, #220]	@ (8001b18 <HAL_RCC_OscConfig+0xe38>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001a40:	4b35      	ldr	r3, [pc, #212]	@ (8001b18 <HAL_RCC_OscConfig+0xe38>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001a48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a19      	ldr	r1, [r3, #32]
 8001a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	492d      	ldr	r1, [pc, #180]	@ (8001b18 <HAL_RCC_OscConfig+0xe38>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
 8001a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	fa93 f2a3 	rbit	r2, r3
 8001a84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a88:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a8c:	601a      	str	r2, [r3, #0]
  return result;
 8001a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a92:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001a96:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001aa2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	2301      	movs	r3, #1
 8001aac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7fe fddb 	bl	8000668 <HAL_GetTick>
 8001ab2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab6:	e009      	b.n	8001acc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7fe fdd6 	bl	8000668 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e156      	b.n	8001d7a <HAL_RCC_OscConfig+0x109a>
 8001acc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ad4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ad8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ade:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	fa93 f2a3 	rbit	r2, r3
 8001ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001af0:	601a      	str	r2, [r3, #0]
  return result;
 8001af2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001afa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0xe3c>
 8001b10:	4b01      	ldr	r3, [pc, #4]	@ (8001b18 <HAL_RCC_OscConfig+0xe38>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	e02a      	b.n	8001b6c <HAL_RCC_OscConfig+0xe8c>
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b20:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fa93 f2a3 	rbit	r2, r3
 8001b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b46:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b54:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b62:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	4b86      	ldr	r3, [pc, #536]	@ (8001d84 <HAL_RCC_OscConfig+0x10a4>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b70:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b74:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b78:	6011      	str	r1, [r2, #0]
 8001b7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b7e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	fa92 f1a2 	rbit	r1, r2
 8001b88:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b8c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b90:	6011      	str	r1, [r2, #0]
  return result;
 8001b92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b96:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	fab2 f282 	clz	r2, r2
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	f042 0220 	orr.w	r2, r2, #32
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	f002 021f 	and.w	r2, r2, #31
 8001bac:	2101      	movs	r1, #1
 8001bae:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f43f af7f 	beq.w	8001ab8 <HAL_RCC_OscConfig+0xdd8>
 8001bba:	e0dd      	b.n	8001d78 <HAL_RCC_OscConfig+0x1098>
 8001bbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bc4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bdc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001be0:	601a      	str	r2, [r3, #0]
  return result;
 8001be2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001bea:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bf6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2300      	movs	r3, #0
 8001c00:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7fe fd31 	bl	8000668 <HAL_GetTick>
 8001c06:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0a:	e009      	b.n	8001c20 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7fe fd2c 	bl	8000668 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0ac      	b.n	8001d7a <HAL_RCC_OscConfig+0x109a>
 8001c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c24:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c32:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	fa93 f2a3 	rbit	r2, r3
 8001c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c40:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c44:	601a      	str	r2, [r3, #0]
  return result;
 8001c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d102      	bne.n	8001c6a <HAL_RCC_OscConfig+0xf8a>
 8001c64:	4b47      	ldr	r3, [pc, #284]	@ (8001d84 <HAL_RCC_OscConfig+0x10a4>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e027      	b.n	8001cba <HAL_RCC_OscConfig+0xfda>
 8001c6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	fa93 f2a3 	rbit	r2, r3
 8001c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c94:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	4b33      	ldr	r3, [pc, #204]	@ (8001d84 <HAL_RCC_OscConfig+0x10a4>)
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cbe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001cc2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cc6:	6011      	str	r1, [r2, #0]
 8001cc8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ccc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	fa92 f1a2 	rbit	r1, r2
 8001cd6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cda:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001cde:	6011      	str	r1, [r2, #0]
  return result;
 8001ce0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ce4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	fab2 f282 	clz	r2, r2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f042 0220 	orr.w	r2, r2, #32
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f002 021f 	and.w	r2, r2, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d182      	bne.n	8001c0c <HAL_RCC_OscConfig+0xf2c>
 8001d06:	e037      	b.n	8001d78 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e02e      	b.n	8001d7a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_RCC_OscConfig+0x10a4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d24:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <HAL_RCC_OscConfig+0x10a4>)
 8001d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d28:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d30:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001d34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d117      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d48:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d10b      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d60:	f003 020f 	and.w	r2, r3, #15
 8001d64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09e      	sub	sp, #120	@ 0x78
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e162      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b90      	ldr	r3, [pc, #576]	@ (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d910      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b8d      	ldr	r3, [pc, #564]	@ (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	498b      	ldr	r1, [pc, #556]	@ (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b89      	ldr	r3, [pc, #548]	@ (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e14a      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ddc:	4b82      	ldr	r3, [pc, #520]	@ (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	497f      	ldr	r1, [pc, #508]	@ (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80dc 	beq.w	8001fb4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d13c      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xf6>
 8001e04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e08:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xa6>
 8001e28:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	e00f      	b.n	8001e4e <HAL_RCC_ClockConfig+0xc6>
 8001e2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e32:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e40:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e4a:	4b67      	ldr	r3, [pc, #412]	@ (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e56:	fa92 f2a2 	rbit	r2, r2
 8001e5a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e5e:	fab2 f282 	clz	r2, r2
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	f042 0220 	orr.w	r2, r2, #32
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	f002 021f 	and.w	r2, r2, #31
 8001e6e:	2101      	movs	r1, #1
 8001e70:	fa01 f202 	lsl.w	r2, r1, r2
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d17b      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0f3      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d13c      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x178>
 8001e86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e8a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x128>
 8001eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e00f      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x148>
 8001eb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ebe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ec2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ecc:	4b46      	ldr	r3, [pc, #280]	@ (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ed4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001ed6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ed8:	fa92 f2a2 	rbit	r2, r2
 8001edc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001ede:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ee0:	fab2 f282 	clz	r2, r2
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f042 0220 	orr.w	r2, r2, #32
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f002 021f 	and.w	r2, r2, #31
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d13a      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0b2      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
 8001f00:	2302      	movs	r3, #2
 8001f02:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d102      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x1a0>
 8001f22:	4b31      	ldr	r3, [pc, #196]	@ (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	e00d      	b.n	8001f44 <HAL_RCC_ClockConfig+0x1bc>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f34:	2302      	movs	r3, #2
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	2202      	movs	r2, #2
 8001f46:	61ba      	str	r2, [r7, #24]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	fa92 f2a2 	rbit	r2, r2
 8001f4e:	617a      	str	r2, [r7, #20]
  return result;
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	fab2 f282 	clz	r2, r2
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	f042 0220 	orr.w	r2, r2, #32
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	f002 021f 	and.w	r2, r2, #31
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f202 	lsl.w	r2, r1, r2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e079      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f72:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f023 0203 	bic.w	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	491a      	ldr	r1, [pc, #104]	@ (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f84:	f7fe fb70 	bl	8000668 <HAL_GetTick>
 8001f88:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f7fe fb6c 	bl	8000668 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e061      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 020c 	and.w	r2, r3, #12
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d1eb      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d214      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 0207 	bic.w	r2, r3, #7
 8001fca:	4906      	ldr	r1, [pc, #24]	@ (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <HAL_RCC_ClockConfig+0x25c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e040      	b.n	8002066 <HAL_RCC_ClockConfig+0x2de>
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	491a      	ldr	r1, [pc, #104]	@ (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002016:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4912      	ldr	r1, [pc, #72]	@ (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800202a:	f000 f829 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800202e:	4601      	mov	r1, r0
 8002030:	4b0f      	ldr	r3, [pc, #60]	@ (8002070 <HAL_RCC_ClockConfig+0x2e8>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002038:	22f0      	movs	r2, #240	@ 0xf0
 800203a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	fa92 f2a2 	rbit	r2, r2
 8002042:	60fa      	str	r2, [r7, #12]
  return result;
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	fab2 f282 	clz	r2, r2
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	40d3      	lsrs	r3, r2
 800204e:	4a09      	ldr	r2, [pc, #36]	@ (8002074 <HAL_RCC_ClockConfig+0x2ec>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	fa21 f303 	lsr.w	r3, r1, r3
 8002056:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <HAL_RCC_ClockConfig+0x2f0>)
 8002058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800205a:	4b08      	ldr	r3, [pc, #32]	@ (800207c <HAL_RCC_ClockConfig+0x2f4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fabe 	bl	80005e0 <HAL_InitTick>
  
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3778      	adds	r7, #120	@ 0x78
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	08003314 	.word	0x08003314
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800209a:	4b1f      	ldr	r3, [pc, #124]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x98>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x30>
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x36>
 80020ae:	e029      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b0:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020b2:	613b      	str	r3, [r7, #16]
      break;
 80020b4:	e029      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	0c9b      	lsrs	r3, r3, #18
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	4a18      	ldr	r2, [pc, #96]	@ (8002120 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x98>)
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	4a15      	ldr	r2, [pc, #84]	@ (8002124 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020dc:	4a0f      	ldr	r2, [pc, #60]	@ (800211c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e007      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020ee:	4a0b      	ldr	r2, [pc, #44]	@ (800211c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	613b      	str	r3, [r7, #16]
      break;
 8002102:	e002      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002104:	4b05      	ldr	r3, [pc, #20]	@ (800211c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002106:	613b      	str	r3, [r7, #16]
      break;
 8002108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210a:	693b      	ldr	r3, [r7, #16]
}
 800210c:	4618      	mov	r0, r3
 800210e:	371c      	adds	r7, #28
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40021000 	.word	0x40021000
 800211c:	007a1200 	.word	0x007a1200
 8002120:	0800332c 	.word	0x0800332c
 8002124:	0800333c 	.word	0x0800333c

08002128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_RCC_GetHCLKFreq+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002146:	f7ff ffef 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 800214a:	4601      	mov	r1, r0
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002154:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002158:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	fa92 f2a2 	rbit	r2, r2
 8002160:	603a      	str	r2, [r7, #0]
  return result;
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	fab2 f282 	clz	r2, r2
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	40d3      	lsrs	r3, r2
 800216c:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <HAL_RCC_GetPCLK1Freq+0x40>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	08003324 	.word	0x08003324

08002184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800218a:	f7ff ffcd 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 800218e:	4601      	mov	r1, r0
 8002190:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002198:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800219c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	fa92 f2a2 	rbit	r2, r2
 80021a4:	603a      	str	r2, [r7, #0]
  return result;
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	fab2 f282 	clz	r2, r2
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	40d3      	lsrs	r3, r2
 80021b0:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08003324 	.word	0x08003324

080021c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e040      	b.n	800225c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7fe f922 	bl	8000434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2224      	movs	r2, #36	@ 0x24
 80021f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0201 	bic.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fdcc 	bl	8002dac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fbf5 	bl	8002a04 <UART_SetConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e01b      	b.n	800225c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fe4b 	bl	8002ef0 <UART_CheckIdleState>
 800225a:	4603      	mov	r3, r0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800227a:	2b20      	cmp	r3, #32
 800227c:	f040 80b6 	bne.w	80023ec <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_UART_Receive+0x28>
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0ae      	b.n	80023ee <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2222      	movs	r2, #34	@ 0x22
 800229c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022a6:	f7fe f9df 	bl	8000668 <HAL_GetTick>
 80022aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022c4:	d10e      	bne.n	80022e4 <HAL_UART_Receive+0x80>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <HAL_UART_Receive+0x76>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80022d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80022d8:	e02d      	b.n	8002336 <HAL_UART_Receive+0xd2>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	22ff      	movs	r2, #255	@ 0xff
 80022de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80022e2:	e028      	b.n	8002336 <HAL_UART_Receive+0xd2>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10d      	bne.n	8002308 <HAL_UART_Receive+0xa4>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d104      	bne.n	80022fe <HAL_UART_Receive+0x9a>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	22ff      	movs	r2, #255	@ 0xff
 80022f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80022fc:	e01b      	b.n	8002336 <HAL_UART_Receive+0xd2>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	227f      	movs	r2, #127	@ 0x7f
 8002302:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002306:	e016      	b.n	8002336 <HAL_UART_Receive+0xd2>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002310:	d10d      	bne.n	800232e <HAL_UART_Receive+0xca>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d104      	bne.n	8002324 <HAL_UART_Receive+0xc0>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	227f      	movs	r2, #127	@ 0x7f
 800231e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002322:	e008      	b.n	8002336 <HAL_UART_Receive+0xd2>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	223f      	movs	r2, #63	@ 0x3f
 8002328:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800232c:	e003      	b.n	8002336 <HAL_UART_Receive+0xd2>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800233c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002346:	d108      	bne.n	800235a <HAL_UART_Receive+0xf6>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d104      	bne.n	800235a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	e003      	b.n	8002362 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002362:	e037      	b.n	80023d4 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2200      	movs	r2, #0
 800236c:	2120      	movs	r1, #32
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fe66 	bl	8003040 <UART_WaitOnFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d005      	beq.n	8002386 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2220      	movs	r2, #32
 800237e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e033      	b.n	80023ee <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10c      	bne.n	80023a6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002392:	b29a      	uxth	r2, r3
 8002394:	8a7b      	ldrh	r3, [r7, #18]
 8002396:	4013      	ands	r3, r2
 8002398:	b29a      	uxth	r2, r3
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	3302      	adds	r3, #2
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	e00d      	b.n	80023c2 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	8a7b      	ldrh	r3, [r7, #18]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	4013      	ands	r3, r2
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	3301      	adds	r3, #1
 80023c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1c1      	bne.n	8002364 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b0ba      	sub	sp, #232	@ 0xe8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800241e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002422:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002426:	4013      	ands	r3, r2
 8002428:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800242c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d115      	bne.n	8002460 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00f      	beq.n	8002460 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 82ab 	beq.w	80029ac <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
      }
      return;
 800245e:	e2a5      	b.n	80029ac <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8117 	beq.w	8002698 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800246a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002476:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800247a:	4b85      	ldr	r3, [pc, #532]	@ (8002690 <HAL_UART_IRQHandler+0x298>)
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 810a 	beq.w	8002698 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d011      	beq.n	80024b4 <HAL_UART_IRQHandler+0xbc>
 8002490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00b      	beq.n	80024b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2201      	movs	r2, #1
 80024a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d011      	beq.n	80024e4 <HAL_UART_IRQHandler+0xec>
 80024c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00b      	beq.n	80024e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2202      	movs	r2, #2
 80024d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024da:	f043 0204 	orr.w	r2, r3, #4
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d011      	beq.n	8002514 <HAL_UART_IRQHandler+0x11c>
 80024f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00b      	beq.n	8002514 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2204      	movs	r2, #4
 8002502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800250a:	f043 0202 	orr.w	r2, r3, #2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d017      	beq.n	8002550 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800252c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002530:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2208      	movs	r2, #8
 800253e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002546:	f043 0208 	orr.w	r2, r3, #8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002558:	2b00      	cmp	r3, #0
 800255a:	d012      	beq.n	8002582 <HAL_UART_IRQHandler+0x18a>
 800255c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002560:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00c      	beq.n	8002582 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002578:	f043 0220 	orr.w	r2, r3, #32
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8211 	beq.w	80029b0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800258e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00d      	beq.n	80025b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800259a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ca:	2b40      	cmp	r3, #64	@ 0x40
 80025cc:	d005      	beq.n	80025da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80025ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d04f      	beq.n	800267a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fd9d 	bl	800311a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ea:	2b40      	cmp	r3, #64	@ 0x40
 80025ec:	d141      	bne.n	8002672 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3308      	adds	r3, #8
 80025f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025fc:	e853 3f00 	ldrex	r3, [r3]
 8002600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002604:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800260c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3308      	adds	r3, #8
 8002616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800261a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800261e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800262a:	e841 2300 	strex	r3, r2, [r1]
 800262e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1d9      	bne.n	80025ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263e:	2b00      	cmp	r3, #0
 8002640:	d013      	beq.n	800266a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002646:	4a13      	ldr	r2, [pc, #76]	@ (8002694 <HAL_UART_IRQHandler+0x29c>)
 8002648:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe f965 	bl	800091e <HAL_DMA_Abort_IT>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d017      	beq.n	800268a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800265e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002664:	4610      	mov	r0, r2
 8002666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002668:	e00f      	b.n	800268a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f9b4 	bl	80029d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002670:	e00b      	b.n	800268a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f9b0 	bl	80029d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002678:	e007      	b.n	800268a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f9ac 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002688:	e192      	b.n	80029b0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800268a:	bf00      	nop
    return;
 800268c:	e190      	b.n	80029b0 <HAL_UART_IRQHandler+0x5b8>
 800268e:	bf00      	nop
 8002690:	04000120 	.word	0x04000120
 8002694:	080031e3 	.word	0x080031e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800269c:	2b01      	cmp	r3, #1
 800269e:	f040 814b 	bne.w	8002938 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80026a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8144 	beq.w	8002938 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80026b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 813d 	beq.w	8002938 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2210      	movs	r2, #16
 80026c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d0:	2b40      	cmp	r3, #64	@ 0x40
 80026d2:	f040 80b5 	bne.w	8002840 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8164 	beq.w	80029b4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80026f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026f6:	429a      	cmp	r2, r3
 80026f8:	f080 815c 	bcs.w	80029b4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002702:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b20      	cmp	r3, #32
 800270e:	f000 8086 	beq.w	800281e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800271e:	e853 3f00 	ldrex	r3, [r3]
 8002722:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002726:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800272a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800272e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800273c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002740:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002744:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002748:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800274c:	e841 2300 	strex	r3, r2, [r1]
 8002750:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1da      	bne.n	8002712 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3308      	adds	r3, #8
 8002762:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002764:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002766:	e853 3f00 	ldrex	r3, [r3]
 800276a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800276c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3308      	adds	r3, #8
 800277c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002780:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002784:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002786:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002788:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800278c:	e841 2300 	strex	r3, r2, [r1]
 8002790:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e1      	bne.n	800275c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3308      	adds	r3, #8
 800279e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027a2:	e853 3f00 	ldrex	r3, [r3]
 80027a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80027a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3308      	adds	r3, #8
 80027b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80027bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80027c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e3      	bne.n	8002798 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027e6:	e853 3f00 	ldrex	r3, [r3]
 80027ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80027ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ee:	f023 0310 	bic.w	r3, r3, #16
 80027f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002800:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002802:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002804:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002806:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002808:	e841 2300 	strex	r3, r2, [r1]
 800280c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800280e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e4      	bne.n	80027de <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe f842 	bl	80008a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002830:	b29b      	uxth	r3, r3
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	b29b      	uxth	r3, r3
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f8d7 	bl	80029ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800283e:	e0b9      	b.n	80029b4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800284c:	b29b      	uxth	r3, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80ab 	beq.w	80029b8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002862:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80a6 	beq.w	80029b8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002874:	e853 3f00 	ldrex	r3, [r3]
 8002878:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800287a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800287c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002880:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800288e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002890:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002894:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800289c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e4      	bne.n	800286c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3308      	adds	r3, #8
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	623b      	str	r3, [r7, #32]
   return(result);
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3308      	adds	r3, #8
 80028c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80028c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80028c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80028d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e3      	bne.n	80028a2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2220      	movs	r2, #32
 80028de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	e853 3f00 	ldrex	r3, [r3]
 80028fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0310 	bic.w	r3, r3, #16
 8002902:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002914:	69b9      	ldr	r1, [r7, #24]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	e841 2300 	strex	r3, r2, [r1]
 800291c:	617b      	str	r3, [r7, #20]
   return(result);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e4      	bne.n	80028ee <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800292a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f85b 	bl	80029ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002936:	e03f      	b.n	80029b8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800293c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00e      	beq.n	8002962 <HAL_UART_IRQHandler+0x56a>
 8002944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002948:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fc81 	bl	8003262 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002960:	e02d      	b.n	80029be <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00e      	beq.n	800298c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800296e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01c      	beq.n	80029bc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
    }
    return;
 800298a:	e017      	b.n	80029bc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800298c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	d012      	beq.n	80029be <HAL_UART_IRQHandler+0x5c6>
 8002998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800299c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00c      	beq.n	80029be <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fc32 	bl	800320e <UART_EndTransmit_IT>
    return;
 80029aa:	e008      	b.n	80029be <HAL_UART_IRQHandler+0x5c6>
      return;
 80029ac:	bf00      	nop
 80029ae:	e006      	b.n	80029be <HAL_UART_IRQHandler+0x5c6>
    return;
 80029b0:	bf00      	nop
 80029b2:	e004      	b.n	80029be <HAL_UART_IRQHandler+0x5c6>
      return;
 80029b4:	bf00      	nop
 80029b6:	e002      	b.n	80029be <HAL_UART_IRQHandler+0x5c6>
      return;
 80029b8:	bf00      	nop
 80029ba:	e000      	b.n	80029be <HAL_UART_IRQHandler+0x5c6>
    return;
 80029bc:	bf00      	nop
  }

}
 80029be:	37e8      	adds	r7, #232	@ 0xe8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b92      	ldr	r3, [pc, #584]	@ (8002c78 <UART_SetConfig+0x274>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	6979      	ldr	r1, [r7, #20]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a80      	ldr	r2, [pc, #512]	@ (8002c7c <UART_SetConfig+0x278>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d120      	bne.n	8002ac2 <UART_SetConfig+0xbe>
 8002a80:	4b7f      	ldr	r3, [pc, #508]	@ (8002c80 <UART_SetConfig+0x27c>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d817      	bhi.n	8002abc <UART_SetConfig+0xb8>
 8002a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a94 <UART_SetConfig+0x90>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002aa5 	.word	0x08002aa5
 8002a98:	08002ab1 	.word	0x08002ab1
 8002a9c:	08002ab7 	.word	0x08002ab7
 8002aa0:	08002aab 	.word	0x08002aab
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	77fb      	strb	r3, [r7, #31]
 8002aa8:	e0b5      	b.n	8002c16 <UART_SetConfig+0x212>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	77fb      	strb	r3, [r7, #31]
 8002aae:	e0b2      	b.n	8002c16 <UART_SetConfig+0x212>
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e0af      	b.n	8002c16 <UART_SetConfig+0x212>
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	77fb      	strb	r3, [r7, #31]
 8002aba:	e0ac      	b.n	8002c16 <UART_SetConfig+0x212>
 8002abc:	2310      	movs	r3, #16
 8002abe:	77fb      	strb	r3, [r7, #31]
 8002ac0:	e0a9      	b.n	8002c16 <UART_SetConfig+0x212>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6f      	ldr	r2, [pc, #444]	@ (8002c84 <UART_SetConfig+0x280>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d124      	bne.n	8002b16 <UART_SetConfig+0x112>
 8002acc:	4b6c      	ldr	r3, [pc, #432]	@ (8002c80 <UART_SetConfig+0x27c>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ad4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ad8:	d011      	beq.n	8002afe <UART_SetConfig+0xfa>
 8002ada:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ade:	d817      	bhi.n	8002b10 <UART_SetConfig+0x10c>
 8002ae0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ae4:	d011      	beq.n	8002b0a <UART_SetConfig+0x106>
 8002ae6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002aea:	d811      	bhi.n	8002b10 <UART_SetConfig+0x10c>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <UART_SetConfig+0xf4>
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af4:	d006      	beq.n	8002b04 <UART_SetConfig+0x100>
 8002af6:	e00b      	b.n	8002b10 <UART_SetConfig+0x10c>
 8002af8:	2300      	movs	r3, #0
 8002afa:	77fb      	strb	r3, [r7, #31]
 8002afc:	e08b      	b.n	8002c16 <UART_SetConfig+0x212>
 8002afe:	2302      	movs	r3, #2
 8002b00:	77fb      	strb	r3, [r7, #31]
 8002b02:	e088      	b.n	8002c16 <UART_SetConfig+0x212>
 8002b04:	2304      	movs	r3, #4
 8002b06:	77fb      	strb	r3, [r7, #31]
 8002b08:	e085      	b.n	8002c16 <UART_SetConfig+0x212>
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	77fb      	strb	r3, [r7, #31]
 8002b0e:	e082      	b.n	8002c16 <UART_SetConfig+0x212>
 8002b10:	2310      	movs	r3, #16
 8002b12:	77fb      	strb	r3, [r7, #31]
 8002b14:	e07f      	b.n	8002c16 <UART_SetConfig+0x212>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c88 <UART_SetConfig+0x284>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d124      	bne.n	8002b6a <UART_SetConfig+0x166>
 8002b20:	4b57      	ldr	r3, [pc, #348]	@ (8002c80 <UART_SetConfig+0x27c>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b24:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002b28:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b2c:	d011      	beq.n	8002b52 <UART_SetConfig+0x14e>
 8002b2e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b32:	d817      	bhi.n	8002b64 <UART_SetConfig+0x160>
 8002b34:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b38:	d011      	beq.n	8002b5e <UART_SetConfig+0x15a>
 8002b3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b3e:	d811      	bhi.n	8002b64 <UART_SetConfig+0x160>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <UART_SetConfig+0x148>
 8002b44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b48:	d006      	beq.n	8002b58 <UART_SetConfig+0x154>
 8002b4a:	e00b      	b.n	8002b64 <UART_SetConfig+0x160>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	77fb      	strb	r3, [r7, #31]
 8002b50:	e061      	b.n	8002c16 <UART_SetConfig+0x212>
 8002b52:	2302      	movs	r3, #2
 8002b54:	77fb      	strb	r3, [r7, #31]
 8002b56:	e05e      	b.n	8002c16 <UART_SetConfig+0x212>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	77fb      	strb	r3, [r7, #31]
 8002b5c:	e05b      	b.n	8002c16 <UART_SetConfig+0x212>
 8002b5e:	2308      	movs	r3, #8
 8002b60:	77fb      	strb	r3, [r7, #31]
 8002b62:	e058      	b.n	8002c16 <UART_SetConfig+0x212>
 8002b64:	2310      	movs	r3, #16
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	e055      	b.n	8002c16 <UART_SetConfig+0x212>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a47      	ldr	r2, [pc, #284]	@ (8002c8c <UART_SetConfig+0x288>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d124      	bne.n	8002bbe <UART_SetConfig+0x1ba>
 8002b74:	4b42      	ldr	r3, [pc, #264]	@ (8002c80 <UART_SetConfig+0x27c>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b78:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002b7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b80:	d011      	beq.n	8002ba6 <UART_SetConfig+0x1a2>
 8002b82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b86:	d817      	bhi.n	8002bb8 <UART_SetConfig+0x1b4>
 8002b88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b8c:	d011      	beq.n	8002bb2 <UART_SetConfig+0x1ae>
 8002b8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b92:	d811      	bhi.n	8002bb8 <UART_SetConfig+0x1b4>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <UART_SetConfig+0x19c>
 8002b98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b9c:	d006      	beq.n	8002bac <UART_SetConfig+0x1a8>
 8002b9e:	e00b      	b.n	8002bb8 <UART_SetConfig+0x1b4>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	77fb      	strb	r3, [r7, #31]
 8002ba4:	e037      	b.n	8002c16 <UART_SetConfig+0x212>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e034      	b.n	8002c16 <UART_SetConfig+0x212>
 8002bac:	2304      	movs	r3, #4
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e031      	b.n	8002c16 <UART_SetConfig+0x212>
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	77fb      	strb	r3, [r7, #31]
 8002bb6:	e02e      	b.n	8002c16 <UART_SetConfig+0x212>
 8002bb8:	2310      	movs	r3, #16
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	e02b      	b.n	8002c16 <UART_SetConfig+0x212>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a33      	ldr	r2, [pc, #204]	@ (8002c90 <UART_SetConfig+0x28c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d124      	bne.n	8002c12 <UART_SetConfig+0x20e>
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c80 <UART_SetConfig+0x27c>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bcc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002bd0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bd4:	d011      	beq.n	8002bfa <UART_SetConfig+0x1f6>
 8002bd6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bda:	d817      	bhi.n	8002c0c <UART_SetConfig+0x208>
 8002bdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002be0:	d011      	beq.n	8002c06 <UART_SetConfig+0x202>
 8002be2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002be6:	d811      	bhi.n	8002c0c <UART_SetConfig+0x208>
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <UART_SetConfig+0x1f0>
 8002bec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bf0:	d006      	beq.n	8002c00 <UART_SetConfig+0x1fc>
 8002bf2:	e00b      	b.n	8002c0c <UART_SetConfig+0x208>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e00d      	b.n	8002c16 <UART_SetConfig+0x212>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e00a      	b.n	8002c16 <UART_SetConfig+0x212>
 8002c00:	2304      	movs	r3, #4
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e007      	b.n	8002c16 <UART_SetConfig+0x212>
 8002c06:	2308      	movs	r3, #8
 8002c08:	77fb      	strb	r3, [r7, #31]
 8002c0a:	e004      	b.n	8002c16 <UART_SetConfig+0x212>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e001      	b.n	8002c16 <UART_SetConfig+0x212>
 8002c12:	2310      	movs	r3, #16
 8002c14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c1e:	d16b      	bne.n	8002cf8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002c20:	7ffb      	ldrb	r3, [r7, #31]
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d838      	bhi.n	8002c98 <UART_SetConfig+0x294>
 8002c26:	a201      	add	r2, pc, #4	@ (adr r2, 8002c2c <UART_SetConfig+0x228>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c51 	.word	0x08002c51
 8002c30:	08002c59 	.word	0x08002c59
 8002c34:	08002c61 	.word	0x08002c61
 8002c38:	08002c99 	.word	0x08002c99
 8002c3c:	08002c67 	.word	0x08002c67
 8002c40:	08002c99 	.word	0x08002c99
 8002c44:	08002c99 	.word	0x08002c99
 8002c48:	08002c99 	.word	0x08002c99
 8002c4c:	08002c6f 	.word	0x08002c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c50:	f7ff fa76 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8002c54:	61b8      	str	r0, [r7, #24]
        break;
 8002c56:	e024      	b.n	8002ca2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c58:	f7ff fa94 	bl	8002184 <HAL_RCC_GetPCLK2Freq>
 8002c5c:	61b8      	str	r0, [r7, #24]
        break;
 8002c5e:	e020      	b.n	8002ca2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c60:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <UART_SetConfig+0x290>)
 8002c62:	61bb      	str	r3, [r7, #24]
        break;
 8002c64:	e01d      	b.n	8002ca2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c66:	f7ff fa0b 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 8002c6a:	61b8      	str	r0, [r7, #24]
        break;
 8002c6c:	e019      	b.n	8002ca2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c72:	61bb      	str	r3, [r7, #24]
        break;
 8002c74:	e015      	b.n	8002ca2 <UART_SetConfig+0x29e>
 8002c76:	bf00      	nop
 8002c78:	efff69f3 	.word	0xefff69f3
 8002c7c:	40013800 	.word	0x40013800
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40004400 	.word	0x40004400
 8002c88:	40004800 	.word	0x40004800
 8002c8c:	40004c00 	.word	0x40004c00
 8002c90:	40005000 	.word	0x40005000
 8002c94:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	77bb      	strb	r3, [r7, #30]
        break;
 8002ca0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d073      	beq.n	8002d90 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	005a      	lsls	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	441a      	add	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b0f      	cmp	r3, #15
 8002cc2:	d916      	bls.n	8002cf2 <UART_SetConfig+0x2ee>
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cca:	d212      	bcs.n	8002cf2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	f023 030f 	bic.w	r3, r3, #15
 8002cd4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	89fb      	ldrh	r3, [r7, #14]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	89fa      	ldrh	r2, [r7, #14]
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	e04e      	b.n	8002d90 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	77bb      	strb	r3, [r7, #30]
 8002cf6:	e04b      	b.n	8002d90 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cf8:	7ffb      	ldrb	r3, [r7, #31]
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d827      	bhi.n	8002d4e <UART_SetConfig+0x34a>
 8002cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002d04 <UART_SetConfig+0x300>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d31 	.word	0x08002d31
 8002d0c:	08002d39 	.word	0x08002d39
 8002d10:	08002d4f 	.word	0x08002d4f
 8002d14:	08002d3f 	.word	0x08002d3f
 8002d18:	08002d4f 	.word	0x08002d4f
 8002d1c:	08002d4f 	.word	0x08002d4f
 8002d20:	08002d4f 	.word	0x08002d4f
 8002d24:	08002d47 	.word	0x08002d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7ff fa0a 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	61b8      	str	r0, [r7, #24]
        break;
 8002d2e:	e013      	b.n	8002d58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d30:	f7ff fa28 	bl	8002184 <HAL_RCC_GetPCLK2Freq>
 8002d34:	61b8      	str	r0, [r7, #24]
        break;
 8002d36:	e00f      	b.n	8002d58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <UART_SetConfig+0x3a4>)
 8002d3a:	61bb      	str	r3, [r7, #24]
        break;
 8002d3c:	e00c      	b.n	8002d58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d3e:	f7ff f99f 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 8002d42:	61b8      	str	r0, [r7, #24]
        break;
 8002d44:	e008      	b.n	8002d58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d4a:	61bb      	str	r3, [r7, #24]
        break;
 8002d4c:	e004      	b.n	8002d58 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	77bb      	strb	r3, [r7, #30]
        break;
 8002d56:	bf00      	nop
    }

    if (pclk != 0U)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d018      	beq.n	8002d90 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	085a      	lsrs	r2, r3, #1
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	441a      	add	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	d909      	bls.n	8002d8c <UART_SetConfig+0x388>
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d7e:	d205      	bcs.n	8002d8c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	e001      	b.n	8002d90 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002d9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	007a1200 	.word	0x007a1200

08002dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01a      	beq.n	8002ec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eaa:	d10a      	bne.n	8002ec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b098      	sub	sp, #96	@ 0x60
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f00:	f7fd fbb2 	bl	8000668 <HAL_GetTick>
 8002f04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d12e      	bne.n	8002f72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f88c 	bl	8003040 <UART_WaitOnFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d021      	beq.n	8002f72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f36:	e853 3f00 	ldrex	r3, [r3]
 8002f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e6      	bne.n	8002f2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e062      	b.n	8003038 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d149      	bne.n	8003014 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f856 	bl	8003040 <UART_WaitOnFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d03c      	beq.n	8003014 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	e853 3f00 	ldrex	r3, [r3]
 8002fa6:	623b      	str	r3, [r7, #32]
   return(result);
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc0:	e841 2300 	strex	r3, r2, [r1]
 8002fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e6      	bne.n	8002f9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3308      	adds	r3, #8
 8002fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fec:	61fa      	str	r2, [r7, #28]
 8002fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	69b9      	ldr	r1, [r7, #24]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e5      	bne.n	8002fcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e011      	b.n	8003038 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3758      	adds	r7, #88	@ 0x58
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003050:	e04f      	b.n	80030f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d04b      	beq.n	80030f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305a:	f7fd fb05 	bl	8000668 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <UART_WaitOnFlagUntilTimeout+0x30>
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e04e      	b.n	8003112 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d037      	beq.n	80030f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b80      	cmp	r3, #128	@ 0x80
 8003086:	d034      	beq.n	80030f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b40      	cmp	r3, #64	@ 0x40
 800308c:	d031      	beq.n	80030f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b08      	cmp	r3, #8
 800309a:	d110      	bne.n	80030be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2208      	movs	r2, #8
 80030a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f838 	bl	800311a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2208      	movs	r2, #8
 80030ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e029      	b.n	8003112 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030cc:	d111      	bne.n	80030f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f81e 	bl	800311a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e00f      	b.n	8003112 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4013      	ands	r3, r2
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	429a      	cmp	r2, r3
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	429a      	cmp	r2, r3
 800310e:	d0a0      	beq.n	8003052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800311a:	b480      	push	{r7}
 800311c:	b095      	sub	sp, #84	@ 0x54
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800312a:	e853 3f00 	ldrex	r3, [r3]
 800312e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003140:	643b      	str	r3, [r7, #64]	@ 0x40
 8003142:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003144:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003146:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003148:	e841 2300 	strex	r3, r2, [r1]
 800314c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800314e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e6      	bne.n	8003122 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3308      	adds	r3, #8
 800315a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	e853 3f00 	ldrex	r3, [r3]
 8003162:	61fb      	str	r3, [r7, #28]
   return(result);
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3308      	adds	r3, #8
 8003172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003174:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003176:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003178:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800317a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800317c:	e841 2300 	strex	r3, r2, [r1]
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e5      	bne.n	8003154 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318c:	2b01      	cmp	r3, #1
 800318e:	d118      	bne.n	80031c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	60bb      	str	r3, [r7, #8]
   return(result);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f023 0310 	bic.w	r3, r3, #16
 80031a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	613b      	str	r3, [r7, #16]
   return(result);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e6      	bne.n	8003190 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80031d6:	bf00      	nop
 80031d8:	3754      	adds	r7, #84	@ 0x54
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7ff fbe9 	bl	80029d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b088      	sub	sp, #32
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	60bb      	str	r3, [r7, #8]
   return(result);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003238:	6979      	ldr	r1, [r7, #20]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	613b      	str	r3, [r7, #16]
   return(result);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e6      	bne.n	8003216 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fbb5 	bl	80029c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800325a:	bf00      	nop
 800325c:	3720      	adds	r7, #32
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <memset>:
 8003276:	4402      	add	r2, r0
 8003278:	4603      	mov	r3, r0
 800327a:	4293      	cmp	r3, r2
 800327c:	d100      	bne.n	8003280 <memset+0xa>
 800327e:	4770      	bx	lr
 8003280:	f803 1b01 	strb.w	r1, [r3], #1
 8003284:	e7f9      	b.n	800327a <memset+0x4>

08003286 <strncmp>:
 8003286:	b510      	push	{r4, lr}
 8003288:	b16a      	cbz	r2, 80032a6 <strncmp+0x20>
 800328a:	3901      	subs	r1, #1
 800328c:	1884      	adds	r4, r0, r2
 800328e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003292:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003296:	429a      	cmp	r2, r3
 8003298:	d103      	bne.n	80032a2 <strncmp+0x1c>
 800329a:	42a0      	cmp	r0, r4
 800329c:	d001      	beq.n	80032a2 <strncmp+0x1c>
 800329e:	2a00      	cmp	r2, #0
 80032a0:	d1f5      	bne.n	800328e <strncmp+0x8>
 80032a2:	1ad0      	subs	r0, r2, r3
 80032a4:	bd10      	pop	{r4, pc}
 80032a6:	4610      	mov	r0, r2
 80032a8:	e7fc      	b.n	80032a4 <strncmp+0x1e>
	...

080032ac <__libc_init_array>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	4d0d      	ldr	r5, [pc, #52]	@ (80032e4 <__libc_init_array+0x38>)
 80032b0:	4c0d      	ldr	r4, [pc, #52]	@ (80032e8 <__libc_init_array+0x3c>)
 80032b2:	1b64      	subs	r4, r4, r5
 80032b4:	10a4      	asrs	r4, r4, #2
 80032b6:	2600      	movs	r6, #0
 80032b8:	42a6      	cmp	r6, r4
 80032ba:	d109      	bne.n	80032d0 <__libc_init_array+0x24>
 80032bc:	4d0b      	ldr	r5, [pc, #44]	@ (80032ec <__libc_init_array+0x40>)
 80032be:	4c0c      	ldr	r4, [pc, #48]	@ (80032f0 <__libc_init_array+0x44>)
 80032c0:	f000 f818 	bl	80032f4 <_init>
 80032c4:	1b64      	subs	r4, r4, r5
 80032c6:	10a4      	asrs	r4, r4, #2
 80032c8:	2600      	movs	r6, #0
 80032ca:	42a6      	cmp	r6, r4
 80032cc:	d105      	bne.n	80032da <__libc_init_array+0x2e>
 80032ce:	bd70      	pop	{r4, r5, r6, pc}
 80032d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d4:	4798      	blx	r3
 80032d6:	3601      	adds	r6, #1
 80032d8:	e7ee      	b.n	80032b8 <__libc_init_array+0xc>
 80032da:	f855 3b04 	ldr.w	r3, [r5], #4
 80032de:	4798      	blx	r3
 80032e0:	3601      	adds	r6, #1
 80032e2:	e7f2      	b.n	80032ca <__libc_init_array+0x1e>
 80032e4:	0800334c 	.word	0x0800334c
 80032e8:	0800334c 	.word	0x0800334c
 80032ec:	0800334c 	.word	0x0800334c
 80032f0:	08003350 	.word	0x08003350

080032f4 <_init>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr

08003300 <_fini>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	bf00      	nop
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr
