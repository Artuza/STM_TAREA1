
USB_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003568  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080036fc  080036fc  000046fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003734  08003734  00005028  2**0
                  CONTENTS
  4 .ARM          00000000  08003734  08003734  00005028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003734  08003734  00005028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003734  08003734  00004734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003738  08003738  00004738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800373c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005028  2**0
                  CONTENTS
 10 .bss          000000a8  20000028  20000028  00005028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  00005028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a741  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a5a  00000000  00000000  0000f799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  000111f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ab  00000000  00000000  00011960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f0bd  00000000  00000000  00011f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af3f  00000000  00000000  00030fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc7ca  00000000  00000000  0003bf07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f86d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cd8  00000000  00000000  000f8714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  000fa3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080036e4 	.word	0x080036e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	080036e4 	.word	0x080036e4

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f9f4 	bl	80005c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f814 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8a0 	bl	8000324 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f86e 	bl	80002c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_UART_Transmit(&huart2,tx_buffer,27,10);
 80001e8:	230a      	movs	r3, #10
 80001ea:	221b      	movs	r2, #27
 80001ec:	4904      	ldr	r1, [pc, #16]	@ (8000200 <main+0x2c>)
 80001ee:	4805      	ldr	r0, [pc, #20]	@ (8000204 <main+0x30>)
 80001f0:	f002 fa82 	bl	80026f8 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80001f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001f8:	f000 fa4a 	bl	8000690 <HAL_Delay>
	  HAL_UART_Transmit(&huart2,tx_buffer,27,10);
 80001fc:	bf00      	nop
 80001fe:	e7f3      	b.n	80001e8 <main+0x14>
 8000200:	20000000 	.word	0x20000000
 8000204:	20000044 	.word	0x20000044

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b0a6      	sub	sp, #152	@ 0x98
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000212:	2228      	movs	r2, #40	@ 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f003 fa37 	bl	800368a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2258      	movs	r2, #88	@ 0x58
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f003 fa29 	bl	800368a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000238:	2301      	movs	r3, #1
 800023a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000240:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000250:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000258:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800025c:	2300      	movs	r3, #0
 800025e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fd66 	bl	8000d38 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000272:	f000 f8bd 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027a:	2302      	movs	r3, #2
 800027c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000282:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000286:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000290:	2102      	movs	r1, #2
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fda4 	bl	8001de0 <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800029e:	f000 f8a7 	bl	80003f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f001 ffb7 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002b8:	f000 f89a 	bl	80003f0 <Error_Handler>
  }
}
 80002bc:	bf00      	nop
 80002be:	3798      	adds	r7, #152	@ 0x98
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002c8:	4b14      	ldr	r3, [pc, #80]	@ (800031c <MX_USART2_UART_Init+0x58>)
 80002ca:	4a15      	ldr	r2, [pc, #84]	@ (8000320 <MX_USART2_UART_Init+0x5c>)
 80002cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002ce:	4b13      	ldr	r3, [pc, #76]	@ (800031c <MX_USART2_UART_Init+0x58>)
 80002d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002d6:	4b11      	ldr	r3, [pc, #68]	@ (800031c <MX_USART2_UART_Init+0x58>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <MX_USART2_UART_Init+0x58>)
 80002de:	2200      	movs	r2, #0
 80002e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <MX_USART2_UART_Init+0x58>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <MX_USART2_UART_Init+0x58>)
 80002ea:	220c      	movs	r2, #12
 80002ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <MX_USART2_UART_Init+0x58>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <MX_USART2_UART_Init+0x58>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002fa:	4b08      	ldr	r3, [pc, #32]	@ (800031c <MX_USART2_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000300:	4b06      	ldr	r3, [pc, #24]	@ (800031c <MX_USART2_UART_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000306:	4805      	ldr	r0, [pc, #20]	@ (800031c <MX_USART2_UART_Init+0x58>)
 8000308:	f002 f9a8 	bl	800265c <HAL_UART_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000312:	f000 f86d 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000044 	.word	0x20000044
 8000320:	40004400 	.word	0x40004400

08000324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b08a      	sub	sp, #40	@ 0x28
 8000328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	f107 0314 	add.w	r3, r7, #20
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033a:	4b2b      	ldr	r3, [pc, #172]	@ (80003e8 <MX_GPIO_Init+0xc4>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a2a      	ldr	r2, [pc, #168]	@ (80003e8 <MX_GPIO_Init+0xc4>)
 8000340:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b28      	ldr	r3, [pc, #160]	@ (80003e8 <MX_GPIO_Init+0xc4>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800034e:	613b      	str	r3, [r7, #16]
 8000350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000352:	4b25      	ldr	r3, [pc, #148]	@ (80003e8 <MX_GPIO_Init+0xc4>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a24      	ldr	r2, [pc, #144]	@ (80003e8 <MX_GPIO_Init+0xc4>)
 8000358:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	4b22      	ldr	r3, [pc, #136]	@ (80003e8 <MX_GPIO_Init+0xc4>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036a:	4b1f      	ldr	r3, [pc, #124]	@ (80003e8 <MX_GPIO_Init+0xc4>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a1e      	ldr	r2, [pc, #120]	@ (80003e8 <MX_GPIO_Init+0xc4>)
 8000370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b1c      	ldr	r3, [pc, #112]	@ (80003e8 <MX_GPIO_Init+0xc4>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000382:	4b19      	ldr	r3, [pc, #100]	@ (80003e8 <MX_GPIO_Init+0xc4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a18      	ldr	r2, [pc, #96]	@ (80003e8 <MX_GPIO_Init+0xc4>)
 8000388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b16      	ldr	r3, [pc, #88]	@ (80003e8 <MX_GPIO_Init+0xc4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	2120      	movs	r1, #32
 800039e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003a2:	f000 fcb1 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003ac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80003b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	4619      	mov	r1, r3
 80003bc:	480b      	ldr	r0, [pc, #44]	@ (80003ec <MX_GPIO_Init+0xc8>)
 80003be:	f000 fb19 	bl	80009f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003c2:	2320      	movs	r3, #32
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c6:	2301      	movs	r3, #1
 80003c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ce:	2300      	movs	r3, #0
 80003d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003d2:	f107 0314 	add.w	r3, r7, #20
 80003d6:	4619      	mov	r1, r3
 80003d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003dc:	f000 fb0a 	bl	80009f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e0:	bf00      	nop
 80003e2:	3728      	adds	r7, #40	@ 0x28
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	48000800 	.word	0x48000800

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <Error_Handler+0x8>

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <HAL_MspInit+0x44>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a0e      	ldr	r2, [pc, #56]	@ (8000440 <HAL_MspInit+0x44>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <HAL_MspInit+0x44>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <HAL_MspInit+0x44>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a08      	ldr	r2, [pc, #32]	@ (8000440 <HAL_MspInit+0x44>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <HAL_MspInit+0x44>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000432:	2007      	movs	r0, #7
 8000434:	f000 fa20 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000

08000444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	@ 0x28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a1b      	ldr	r2, [pc, #108]	@ (80004d0 <HAL_UART_MspInit+0x8c>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d130      	bne.n	80004c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000466:	4b1b      	ldr	r3, [pc, #108]	@ (80004d4 <HAL_UART_MspInit+0x90>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a1a      	ldr	r2, [pc, #104]	@ (80004d4 <HAL_UART_MspInit+0x90>)
 800046c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b18      	ldr	r3, [pc, #96]	@ (80004d4 <HAL_UART_MspInit+0x90>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <HAL_UART_MspInit+0x90>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a14      	ldr	r2, [pc, #80]	@ (80004d4 <HAL_UART_MspInit+0x90>)
 8000484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <HAL_UART_MspInit+0x90>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000496:	230c      	movs	r3, #12
 8000498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049a:	2302      	movs	r3, #2
 800049c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2300      	movs	r3, #0
 80004a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004a6:	2307      	movs	r3, #7
 80004a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	4619      	mov	r1, r3
 80004b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b4:	f000 fa9e 	bl	80009f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2100      	movs	r1, #0
 80004bc:	2026      	movs	r0, #38	@ 0x26
 80004be:	f000 f9e6 	bl	800088e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004c2:	2026      	movs	r0, #38	@ 0x26
 80004c4:	f000 f9ff 	bl	80008c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80004c8:	bf00      	nop
 80004ca:	3728      	adds	r7, #40	@ 0x28
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40004400 	.word	0x40004400
 80004d4:	40021000 	.word	0x40021000

080004d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <NMI_Handler+0x4>

080004e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <MemManage_Handler+0x4>

080004f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <UsageFault_Handler+0x4>

08000500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800052e:	f000 f88f 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800053c:	4802      	ldr	r0, [pc, #8]	@ (8000548 <USART2_IRQHandler+0x10>)
 800053e:	f002 f965 	bl	800280c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000044 	.word	0x20000044

0800054c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <SystemInit+0x20>)
 8000552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000556:	4a05      	ldr	r2, [pc, #20]	@ (800056c <SystemInit+0x20>)
 8000558:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800055c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000574:	f7ff ffea 	bl	800054c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	@ (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	@ (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	@ (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059e:	f003 f87d 	bl	800369c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a2:	f7ff fe17 	bl	80001d4 <main>

080005a6 <LoopForever>:

LoopForever:
    b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80005b4:	0800373c 	.word	0x0800373c
  ldr r2, =_sbss
 80005b8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80005bc:	200000d0 	.word	0x200000d0

080005c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>
	...

080005c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <HAL_Init+0x28>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <HAL_Init+0x28>)
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d4:	2003      	movs	r0, #3
 80005d6:	f000 f94f 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f808 	bl	80005f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e0:	f7ff ff0c 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e4:	2300      	movs	r3, #0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40022000 	.word	0x40022000

080005f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <HAL_InitTick+0x54>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <HAL_InitTick+0x58>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f967 	bl	80008e2 <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e00e      	b.n	800063c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d80a      	bhi.n	800063a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000624:	2200      	movs	r2, #0
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f000 f92f 	bl	800088e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000630:	4a06      	ldr	r2, [pc, #24]	@ (800064c <HAL_InitTick+0x5c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	e000      	b.n	800063c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000001c 	.word	0x2000001c
 8000648:	20000024 	.word	0x20000024
 800064c:	20000020 	.word	0x20000020

08000650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <HAL_IncTick+0x20>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_IncTick+0x24>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4413      	add	r3, r2
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <HAL_IncTick+0x24>)
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000024 	.word	0x20000024
 8000674:	200000cc 	.word	0x200000cc

08000678 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;  
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <HAL_GetTick+0x14>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	200000cc 	.word	0x200000cc

08000690 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000698:	f7ff ffee 	bl	8000678 <HAL_GetTick>
 800069c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a8:	d005      	beq.n	80006b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <HAL_Delay+0x44>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006b6:	bf00      	nop
 80006b8:	f7ff ffde 	bl	8000678 <HAL_GetTick>
 80006bc:	4602      	mov	r2, r0
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d8f7      	bhi.n	80006b8 <HAL_Delay+0x28>
  {
  }
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000024 	.word	0x20000024

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	@ (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	2b00      	cmp	r3, #0
 800074c:	db0b      	blt.n	8000766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 021f 	and.w	r2, r3, #31
 8000754:	4907      	ldr	r1, [pc, #28]	@ (8000774 <__NVIC_EnableIRQ+0x38>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	095b      	lsrs	r3, r3, #5
 800075c:	2001      	movs	r0, #1
 800075e:	fa00 f202 	lsl.w	r2, r0, r2
 8000762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000e100 	.word	0xe000e100

08000778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	db0a      	blt.n	80007a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	490c      	ldr	r1, [pc, #48]	@ (80007c4 <__NVIC_SetPriority+0x4c>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a0:	e00a      	b.n	80007b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4908      	ldr	r1, [pc, #32]	@ (80007c8 <__NVIC_SetPriority+0x50>)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	3b04      	subs	r3, #4
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	440b      	add	r3, r1
 80007b6:	761a      	strb	r2, [r3, #24]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	@ 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f1c3 0307 	rsb	r3, r3, #7
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	bf28      	it	cs
 80007ea:	2304      	movcs	r3, #4
 80007ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d902      	bls.n	80007fc <NVIC_EncodePriority+0x30>
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3b03      	subs	r3, #3
 80007fa:	e000      	b.n	80007fe <NVIC_EncodePriority+0x32>
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	f04f 32ff 	mov.w	r2, #4294967295
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43da      	mvns	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	401a      	ands	r2, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000814:	f04f 31ff 	mov.w	r1, #4294967295
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43d9      	mvns	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	4313      	orrs	r3, r2
         );
}
 8000826:	4618      	mov	r0, r3
 8000828:	3724      	adds	r7, #36	@ 0x24
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000844:	d301      	bcc.n	800084a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000846:	2301      	movs	r3, #1
 8000848:	e00f      	b.n	800086a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084a:	4a0a      	ldr	r2, [pc, #40]	@ (8000874 <SysTick_Config+0x40>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000852:	210f      	movs	r1, #15
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f7ff ff8e 	bl	8000778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <SysTick_Config+0x40>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <SysTick_Config+0x40>)
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff29 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff3e 	bl	8000720 <__NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ff8e 	bl	80007cc <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff5d 	bl	8000778 <__NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff31 	bl	800073c <__NVIC_EnableIRQ>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ffa2 	bl	8000834 <SysTick_Config>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d101      	bne.n	800090c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	e02e      	b.n	800096a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000912:	2b02      	cmp	r3, #2
 8000914:	d008      	beq.n	8000928 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2204      	movs	r2, #4
 800091a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	e020      	b.n	800096a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f022 020e 	bic.w	r2, r2, #14
 8000936:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f022 0201 	bic.w	r2, r2, #1
 8000946:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000950:	2101      	movs	r1, #1
 8000952:	fa01 f202 	lsl.w	r2, r1, r2
 8000956:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2201      	movs	r2, #1
 800095c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b084      	sub	sp, #16
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000988:	2b02      	cmp	r3, #2
 800098a:	d005      	beq.n	8000998 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2204      	movs	r2, #4
 8000990:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	e027      	b.n	80009e8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f022 020e 	bic.w	r2, r2, #14
 80009a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f022 0201 	bic.w	r2, r2, #1
 80009b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009c0:	2101      	movs	r1, #1
 80009c2:	fa01 f202 	lsl.w	r2, r1, r2
 80009c6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2201      	movs	r2, #1
 80009cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d003      	beq.n	80009e8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	4798      	blx	r3
    }
  }
  return status;
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a02:	e160      	b.n	8000cc6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 8152 	beq.w	8000cc0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d005      	beq.n	8000a34 <HAL_GPIO_Init+0x40>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d130      	bne.n	8000a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	2203      	movs	r2, #3
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	f003 0201 	and.w	r2, r3, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d017      	beq.n	8000ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2203      	movs	r2, #3
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d123      	bne.n	8000b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	08da      	lsrs	r2, r3, #3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3208      	adds	r2, #8
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	220f      	movs	r2, #15
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	691a      	ldr	r2, [r3, #16]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f003 0307 	and.w	r3, r3, #7
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	08da      	lsrs	r2, r3, #3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3208      	adds	r2, #8
 8000b20:	6939      	ldr	r1, [r7, #16]
 8000b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0203 	and.w	r2, r3, #3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 80ac 	beq.w	8000cc0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b68:	4b5e      	ldr	r3, [pc, #376]	@ (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b5b      	ldr	r3, [pc, #364]	@ (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b80:	4a59      	ldr	r2, [pc, #356]	@ (8000ce8 <HAL_GPIO_Init+0x2f4>)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	3302      	adds	r3, #2
 8000b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	220f      	movs	r2, #15
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000baa:	d025      	beq.n	8000bf8 <HAL_GPIO_Init+0x204>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a4f      	ldr	r2, [pc, #316]	@ (8000cec <HAL_GPIO_Init+0x2f8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d01f      	beq.n	8000bf4 <HAL_GPIO_Init+0x200>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a4e      	ldr	r2, [pc, #312]	@ (8000cf0 <HAL_GPIO_Init+0x2fc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d019      	beq.n	8000bf0 <HAL_GPIO_Init+0x1fc>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a4d      	ldr	r2, [pc, #308]	@ (8000cf4 <HAL_GPIO_Init+0x300>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d013      	beq.n	8000bec <HAL_GPIO_Init+0x1f8>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a4c      	ldr	r2, [pc, #304]	@ (8000cf8 <HAL_GPIO_Init+0x304>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d00d      	beq.n	8000be8 <HAL_GPIO_Init+0x1f4>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a4b      	ldr	r2, [pc, #300]	@ (8000cfc <HAL_GPIO_Init+0x308>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d007      	beq.n	8000be4 <HAL_GPIO_Init+0x1f0>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a4a      	ldr	r2, [pc, #296]	@ (8000d00 <HAL_GPIO_Init+0x30c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d101      	bne.n	8000be0 <HAL_GPIO_Init+0x1ec>
 8000bdc:	2306      	movs	r3, #6
 8000bde:	e00c      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000be0:	2307      	movs	r3, #7
 8000be2:	e00a      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000be4:	2305      	movs	r3, #5
 8000be6:	e008      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000be8:	2304      	movs	r3, #4
 8000bea:	e006      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000bec:	2303      	movs	r3, #3
 8000bee:	e004      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e002      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	f002 0203 	and.w	r2, r2, #3
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	4093      	lsls	r3, r2
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c0a:	4937      	ldr	r1, [pc, #220]	@ (8000ce8 <HAL_GPIO_Init+0x2f4>)
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	3302      	adds	r3, #2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c18:	4b3a      	ldr	r3, [pc, #232]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c3c:	4a31      	ldr	r2, [pc, #196]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c42:	4b30      	ldr	r3, [pc, #192]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c66:	4a27      	ldr	r2, [pc, #156]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c6c:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c90:	4a1c      	ldr	r2, [pc, #112]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <HAL_GPIO_Init+0x310>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f47f ae97 	bne.w	8000a04 <HAL_GPIO_Init+0x10>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
 8000cda:	371c      	adds	r7, #28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	48000400 	.word	0x48000400
 8000cf0:	48000800 	.word	0x48000800
 8000cf4:	48000c00 	.word	0x48000c00
 8000cf8:	48001000 	.word	0x48001000
 8000cfc:	48001400 	.word	0x48001400
 8000d00:	48001800 	.word	0x48001800
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d24:	e002      	b.n	8000d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	f001 b83a 	b.w	8001dd2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 816f 	beq.w	8001052 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d74:	4bb5      	ldr	r3, [pc, #724]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d00c      	beq.n	8000d9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d80:	4bb2      	ldr	r3, [pc, #712]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d15c      	bne.n	8000e46 <HAL_RCC_OscConfig+0x10e>
 8000d8c:	4baf      	ldr	r3, [pc, #700]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d98:	d155      	bne.n	8000e46 <HAL_RCC_OscConfig+0x10e>
 8000d9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d9e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000da6:	fa93 f3a3 	rbit	r3, r3
 8000daa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db2:	fab3 f383 	clz	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	095b      	lsrs	r3, r3, #5
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d102      	bne.n	8000dcc <HAL_RCC_OscConfig+0x94>
 8000dc6:	4ba1      	ldr	r3, [pc, #644]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	e015      	b.n	8000df8 <HAL_RCC_OscConfig+0xc0>
 8000dcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dd0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000dd8:	fa93 f3a3 	rbit	r3, r3
 8000ddc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000de0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000de4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000de8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000df4:	4b95      	ldr	r3, [pc, #596]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dfc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000e00:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000e04:	fa92 f2a2 	rbit	r2, r2
 8000e08:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000e0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	f042 0220 	orr.w	r2, r2, #32
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	f002 021f 	and.w	r2, r2, #31
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	4013      	ands	r3, r2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 8111 	beq.w	8001050 <HAL_RCC_OscConfig+0x318>
 8000e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f040 8108 	bne.w	8001050 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	f000 bfc6 	b.w	8001dd2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e56:	d106      	bne.n	8000e66 <HAL_RCC_OscConfig+0x12e>
 8000e58:	4b7c      	ldr	r3, [pc, #496]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a7b      	ldr	r2, [pc, #492]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e036      	b.n	8000ed4 <HAL_RCC_OscConfig+0x19c>
 8000e66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x158>
 8000e76:	4b75      	ldr	r3, [pc, #468]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a74      	ldr	r2, [pc, #464]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4b72      	ldr	r3, [pc, #456]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a71      	ldr	r2, [pc, #452]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000e88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e021      	b.n	8000ed4 <HAL_RCC_OscConfig+0x19c>
 8000e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x184>
 8000ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a69      	ldr	r2, [pc, #420]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b67      	ldr	r3, [pc, #412]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a66      	ldr	r2, [pc, #408]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e00b      	b.n	8000ed4 <HAL_RCC_OscConfig+0x19c>
 8000ebc:	4b63      	ldr	r3, [pc, #396]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a62      	ldr	r2, [pc, #392]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	4b60      	ldr	r3, [pc, #384]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a5f      	ldr	r2, [pc, #380]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ed2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ed8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d059      	beq.n	8000f98 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fbc8 	bl	8000678 <HAL_GetTick>
 8000ee8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eec:	e00a      	b.n	8000f04 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eee:	f7ff fbc3 	bl	8000678 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	@ 0x64
 8000efc:	d902      	bls.n	8000f04 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	f000 bf67 	b.w	8001dd2 <HAL_RCC_OscConfig+0x109a>
 8000f04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f08:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000f18:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1c:	fab3 f383 	clz	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d102      	bne.n	8000f36 <HAL_RCC_OscConfig+0x1fe>
 8000f30:	4b46      	ldr	r3, [pc, #280]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	e015      	b.n	8000f62 <HAL_RCC_OscConfig+0x22a>
 8000f36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f3a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000f42:	fa93 f3a3 	rbit	r3, r3
 8000f46:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000f4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f4e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f52:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000f56:	fa93 f3a3 	rbit	r3, r3
 8000f5a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f66:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000f6a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000f6e:	fa92 f2a2 	rbit	r2, r2
 8000f72:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000f76:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f7a:	fab2 f282 	clz	r2, r2
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	f042 0220 	orr.w	r2, r2, #32
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	f002 021f 	and.w	r2, r2, #31
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0ab      	beq.n	8000eee <HAL_RCC_OscConfig+0x1b6>
 8000f96:	e05c      	b.n	8001052 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fb6e 	bl	8000678 <HAL_GetTick>
 8000f9c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa0:	e00a      	b.n	8000fb8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa2:	f7ff fb69 	bl	8000678 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	@ 0x64
 8000fb0:	d902      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	f000 bf0d 	b.w	8001dd2 <HAL_RCC_OscConfig+0x109a>
 8000fb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fbc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000fc4:	fa93 f3a3 	rbit	r3, r3
 8000fc8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000fcc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd0:	fab3 f383 	clz	r3, r3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d102      	bne.n	8000fea <HAL_RCC_OscConfig+0x2b2>
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	e015      	b.n	8001016 <HAL_RCC_OscConfig+0x2de>
 8000fea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fee:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000ffe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001002:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001006:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <HAL_RCC_OscConfig+0x314>)
 8001014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001016:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800101a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800101e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001022:	fa92 f2a2 	rbit	r2, r2
 8001026:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800102a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800102e:	fab2 f282 	clz	r2, r2
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	f042 0220 	orr.w	r2, r2, #32
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	f002 021f 	and.w	r2, r2, #31
 800103e:	2101      	movs	r1, #1
 8001040:	fa01 f202 	lsl.w	r2, r1, r2
 8001044:	4013      	ands	r3, r2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1ab      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x26a>
 800104a:	e002      	b.n	8001052 <HAL_RCC_OscConfig+0x31a>
 800104c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001056:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 817f 	beq.w	8001366 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001068:	4ba7      	ldr	r3, [pc, #668]	@ (8001308 <HAL_RCC_OscConfig+0x5d0>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00c      	beq.n	800108e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001074:	4ba4      	ldr	r3, [pc, #656]	@ (8001308 <HAL_RCC_OscConfig+0x5d0>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 030c 	and.w	r3, r3, #12
 800107c:	2b08      	cmp	r3, #8
 800107e:	d173      	bne.n	8001168 <HAL_RCC_OscConfig+0x430>
 8001080:	4ba1      	ldr	r3, [pc, #644]	@ (8001308 <HAL_RCC_OscConfig+0x5d0>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001088:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800108c:	d16c      	bne.n	8001168 <HAL_RCC_OscConfig+0x430>
 800108e:	2302      	movs	r3, #2
 8001090:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001094:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001098:	fa93 f3a3 	rbit	r3, r3
 800109c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80010a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a4:	fab3 f383 	clz	r3, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d102      	bne.n	80010be <HAL_RCC_OscConfig+0x386>
 80010b8:	4b93      	ldr	r3, [pc, #588]	@ (8001308 <HAL_RCC_OscConfig+0x5d0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	e013      	b.n	80010e6 <HAL_RCC_OscConfig+0x3ae>
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80010d0:	2302      	movs	r3, #2
 80010d2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80010d6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80010da:	fa93 f3a3 	rbit	r3, r3
 80010de:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80010e2:	4b89      	ldr	r3, [pc, #548]	@ (8001308 <HAL_RCC_OscConfig+0x5d0>)
 80010e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e6:	2202      	movs	r2, #2
 80010e8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80010ec:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80010f0:	fa92 f2a2 	rbit	r2, r2
 80010f4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80010f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80010fc:	fab2 f282 	clz	r2, r2
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	f042 0220 	orr.w	r2, r2, #32
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	f002 021f 	and.w	r2, r2, #31
 800110c:	2101      	movs	r1, #1
 800110e:	fa01 f202 	lsl.w	r2, r1, r2
 8001112:	4013      	ands	r3, r2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00a      	beq.n	800112e <HAL_RCC_OscConfig+0x3f6>
 8001118:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800111c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d002      	beq.n	800112e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	f000 be52 	b.w	8001dd2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112e:	4b76      	ldr	r3, [pc, #472]	@ (8001308 <HAL_RCC_OscConfig+0x5d0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001136:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800113a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	21f8      	movs	r1, #248	@ 0xf8
 8001144:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001148:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800114c:	fa91 f1a1 	rbit	r1, r1
 8001150:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001154:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001158:	fab1 f181 	clz	r1, r1
 800115c:	b2c9      	uxtb	r1, r1
 800115e:	408b      	lsls	r3, r1
 8001160:	4969      	ldr	r1, [pc, #420]	@ (8001308 <HAL_RCC_OscConfig+0x5d0>)
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001166:	e0fe      	b.n	8001366 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001168:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800116c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 8088 	beq.w	800128a <HAL_RCC_OscConfig+0x552>
 800117a:	2301      	movs	r3, #1
 800117c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800118c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800119a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	461a      	mov	r2, r3
 80011a2:	2301      	movs	r3, #1
 80011a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fa67 	bl	8000678 <HAL_GetTick>
 80011aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b0:	f7ff fa62 	bl	8000678 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d902      	bls.n	80011c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f000 be06 	b.w	8001dd2 <HAL_RCC_OscConfig+0x109a>
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80011d8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	fab3 f383 	clz	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d102      	bne.n	80011f6 <HAL_RCC_OscConfig+0x4be>
 80011f0:	4b45      	ldr	r3, [pc, #276]	@ (8001308 <HAL_RCC_OscConfig+0x5d0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	e013      	b.n	800121e <HAL_RCC_OscConfig+0x4e6>
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800120e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <HAL_RCC_OscConfig+0x5d0>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121e:	2202      	movs	r2, #2
 8001220:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001224:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001228:	fa92 f2a2 	rbit	r2, r2
 800122c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001230:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001234:	fab2 f282 	clz	r2, r2
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	f042 0220 	orr.w	r2, r2, #32
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	f002 021f 	and.w	r2, r2, #31
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0af      	beq.n	80011b0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001250:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <HAL_RCC_OscConfig+0x5d0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800125c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	21f8      	movs	r1, #248	@ 0xf8
 8001266:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800126e:	fa91 f1a1 	rbit	r1, r1
 8001272:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001276:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800127a:	fab1 f181 	clz	r1, r1
 800127e:	b2c9      	uxtb	r1, r1
 8001280:	408b      	lsls	r3, r1
 8001282:	4921      	ldr	r1, [pc, #132]	@ (8001308 <HAL_RCC_OscConfig+0x5d0>)
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
 8001288:	e06d      	b.n	8001366 <HAL_RCC_OscConfig+0x62e>
 800128a:	2301      	movs	r3, #1
 800128c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001290:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800129c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a0:	fab3 f383 	clz	r3, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	461a      	mov	r2, r3
 80012b2:	2300      	movs	r3, #0
 80012b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff f9df 	bl	8000678 <HAL_GetTick>
 80012ba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c0:	f7ff f9da 	bl	8000678 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d902      	bls.n	80012d6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	f000 bd7e 	b.w	8001dd2 <HAL_RCC_OscConfig+0x109a>
 80012d6:	2302      	movs	r3, #2
 80012d8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80012e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ec:	fab3 f383 	clz	r3, r3
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d105      	bne.n	800130c <HAL_RCC_OscConfig+0x5d4>
 8001300:	4b01      	ldr	r3, [pc, #4]	@ (8001308 <HAL_RCC_OscConfig+0x5d0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	e016      	b.n	8001334 <HAL_RCC_OscConfig+0x5fc>
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001324:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001330:	4bbf      	ldr	r3, [pc, #764]	@ (8001630 <HAL_RCC_OscConfig+0x8f8>)
 8001332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001334:	2202      	movs	r2, #2
 8001336:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800133a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800133e:	fa92 f2a2 	rbit	r2, r2
 8001342:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001346:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800134a:	fab2 f282 	clz	r2, r2
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	f042 0220 	orr.w	r2, r2, #32
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	f002 021f 	and.w	r2, r2, #31
 800135a:	2101      	movs	r1, #1
 800135c:	fa01 f202 	lsl.w	r2, r1, r2
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ac      	bne.n	80012c0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800136a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8113 	beq.w	80015a2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800137c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001380:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d07c      	beq.n	8001486 <HAL_RCC_OscConfig+0x74e>
 800138c:	2301      	movs	r3, #1
 800138e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800139e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013a2:	fab3 f383 	clz	r3, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	461a      	mov	r2, r3
 80013aa:	4ba2      	ldr	r3, [pc, #648]	@ (8001634 <HAL_RCC_OscConfig+0x8fc>)
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	461a      	mov	r2, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff f95f 	bl	8000678 <HAL_GetTick>
 80013ba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff f95a 	bl	8000678 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d902      	bls.n	80013d6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f000 bcfe 	b.w	8001dd2 <HAL_RCC_OscConfig+0x109a>
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013e0:	fa93 f2a3 	rbit	r2, r3
 80013e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013f6:	2202      	movs	r2, #2
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	fa93 f2a3 	rbit	r2, r3
 8001408:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800140c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001416:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800141a:	2202      	movs	r2, #2
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001422:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	fa93 f2a3 	rbit	r2, r3
 800142c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001430:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001434:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	4b7e      	ldr	r3, [pc, #504]	@ (8001630 <HAL_RCC_OscConfig+0x8f8>)
 8001438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800143a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800143e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001442:	2102      	movs	r1, #2
 8001444:	6019      	str	r1, [r3, #0]
 8001446:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800144a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	fa93 f1a3 	rbit	r1, r3
 8001454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001458:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800145c:	6019      	str	r1, [r3, #0]
  return result;
 800145e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001462:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fab3 f383 	clz	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001472:	b2db      	uxtb	r3, r3
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	4013      	ands	r3, r2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d09d      	beq.n	80013c0 <HAL_RCC_OscConfig+0x688>
 8001484:	e08d      	b.n	80015a2 <HAL_RCC_OscConfig+0x86a>
 8001486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001496:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	fa93 f2a3 	rbit	r2, r3
 80014a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014a8:	601a      	str	r2, [r3, #0]
  return result;
 80014aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b4:	fab3 f383 	clz	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001634 <HAL_RCC_OscConfig+0x8fc>)
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	461a      	mov	r2, r3
 80014c4:	2300      	movs	r3, #0
 80014c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff f8d6 	bl	8000678 <HAL_GetTick>
 80014cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff f8d1 	bl	8000678 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d902      	bls.n	80014e8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	f000 bc75 	b.w	8001dd2 <HAL_RCC_OscConfig+0x109a>
 80014e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014f0:	2202      	movs	r2, #2
 80014f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	fa93 f2a3 	rbit	r2, r3
 8001502:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001506:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001510:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001514:	2202      	movs	r2, #2
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800151c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	fa93 f2a3 	rbit	r2, r3
 8001526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001534:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001538:	2202      	movs	r2, #2
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001540:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f2a3 	rbit	r2, r3
 800154a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800154e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001552:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001554:	4b36      	ldr	r3, [pc, #216]	@ (8001630 <HAL_RCC_OscConfig+0x8f8>)
 8001556:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001560:	2102      	movs	r1, #2
 8001562:	6019      	str	r1, [r3, #0]
 8001564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001568:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	fa93 f1a3 	rbit	r1, r3
 8001572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001576:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800157a:	6019      	str	r1, [r3, #0]
  return result;
 800157c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001580:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d197      	bne.n	80014d2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 81a5 	beq.w	8001902 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015be:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <HAL_RCC_OscConfig+0x8f8>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d116      	bne.n	80015f8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <HAL_RCC_OscConfig+0x8f8>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a18      	ldr	r2, [pc, #96]	@ (8001630 <HAL_RCC_OscConfig+0x8f8>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <HAL_RCC_OscConfig+0x8f8>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80015de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015f0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <HAL_RCC_OscConfig+0x900>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d121      	bne.n	8001648 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <HAL_RCC_OscConfig+0x900>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0b      	ldr	r2, [pc, #44]	@ (8001638 <HAL_RCC_OscConfig+0x900>)
 800160a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001610:	f7ff f832 	bl	8000678 <HAL_GetTick>
 8001614:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	e010      	b.n	800163c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161a:	f7ff f82d 	bl	8000678 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	@ 0x64
 8001628:	d908      	bls.n	800163c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e3d1      	b.n	8001dd2 <HAL_RCC_OscConfig+0x109a>
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	10908120 	.word	0x10908120
 8001638:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	4b8d      	ldr	r3, [pc, #564]	@ (8001874 <HAL_RCC_OscConfig+0xb3c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0e8      	beq.n	800161a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001648:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x92e>
 8001658:	4b87      	ldr	r3, [pc, #540]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a86      	ldr	r2, [pc, #536]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e035      	b.n	80016d2 <HAL_RCC_OscConfig+0x99a>
 8001666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x958>
 8001676:	4b80      	ldr	r3, [pc, #512]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a7f      	ldr	r2, [pc, #508]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	4b7d      	ldr	r3, [pc, #500]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a7c      	ldr	r2, [pc, #496]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	6213      	str	r3, [r2, #32]
 800168e:	e020      	b.n	80016d2 <HAL_RCC_OscConfig+0x99a>
 8001690:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001694:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d10c      	bne.n	80016ba <HAL_RCC_OscConfig+0x982>
 80016a0:	4b75      	ldr	r3, [pc, #468]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a74      	ldr	r2, [pc, #464]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	4b72      	ldr	r3, [pc, #456]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4a71      	ldr	r2, [pc, #452]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	e00b      	b.n	80016d2 <HAL_RCC_OscConfig+0x99a>
 80016ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a6e      	ldr	r2, [pc, #440]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6213      	str	r3, [r2, #32]
 80016c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a6b      	ldr	r2, [pc, #428]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8081 	beq.w	80017e6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7fe ffc8 	bl	8000678 <HAL_GetTick>
 80016e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	e00b      	b.n	8001706 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7fe ffc3 	bl	8000678 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e365      	b.n	8001dd2 <HAL_RCC_OscConfig+0x109a>
 8001706:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800170a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800170e:	2202      	movs	r2, #2
 8001710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001716:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fa93 f2a3 	rbit	r2, r3
 8001720:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001724:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001732:	2202      	movs	r2, #2
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800173a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	fa93 f2a3 	rbit	r2, r3
 8001744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001748:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800174c:	601a      	str	r2, [r3, #0]
  return result;
 800174e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001752:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001756:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	fab3 f383 	clz	r3, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d102      	bne.n	8001772 <HAL_RCC_OscConfig+0xa3a>
 800176c:	4b42      	ldr	r3, [pc, #264]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	e013      	b.n	800179a <HAL_RCC_OscConfig+0xa62>
 8001772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001776:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800177a:	2202      	movs	r2, #2
 800177c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001782:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	fa93 f2a3 	rbit	r2, r3
 800178c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001790:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	4b38      	ldr	r3, [pc, #224]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 8001798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800179e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017a2:	2102      	movs	r1, #2
 80017a4:	6011      	str	r1, [r2, #0]
 80017a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017aa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	fa92 f1a2 	rbit	r1, r2
 80017b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017b8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80017bc:	6011      	str	r1, [r2, #0]
  return result;
 80017be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017c2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	fab2 f282 	clz	r2, r2
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	f002 021f 	and.w	r2, r2, #31
 80017d8:	2101      	movs	r1, #1
 80017da:	fa01 f202 	lsl.w	r2, r1, r2
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d084      	beq.n	80016ee <HAL_RCC_OscConfig+0x9b6>
 80017e4:	e083      	b.n	80018ee <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7fe ff47 	bl	8000678 <HAL_GetTick>
 80017ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7fe ff42 	bl	8000678 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e2e4      	b.n	8001dd2 <HAL_RCC_OscConfig+0x109a>
 8001808:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001810:	2202      	movs	r2, #2
 8001812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001818:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	fa93 f2a3 	rbit	r2, r3
 8001822:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001826:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001830:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001834:	2202      	movs	r2, #2
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800183c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa93 f2a3 	rbit	r2, r3
 8001846:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800184e:	601a      	str	r2, [r3, #0]
  return result;
 8001850:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001854:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001858:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	095b      	lsrs	r3, r3, #5
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d106      	bne.n	800187c <HAL_RCC_OscConfig+0xb44>
 800186e:	4b02      	ldr	r3, [pc, #8]	@ (8001878 <HAL_RCC_OscConfig+0xb40>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	e017      	b.n	80018a4 <HAL_RCC_OscConfig+0xb6c>
 8001874:	40007000 	.word	0x40007000
 8001878:	40021000 	.word	0x40021000
 800187c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001880:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001884:	2202      	movs	r2, #2
 8001886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	fa93 f2a3 	rbit	r2, r3
 8001896:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800189a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	4bb3      	ldr	r3, [pc, #716]	@ (8001b70 <HAL_RCC_OscConfig+0xe38>)
 80018a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018a8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018ac:	2102      	movs	r1, #2
 80018ae:	6011      	str	r1, [r2, #0]
 80018b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018b4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	fa92 f1a2 	rbit	r1, r2
 80018be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018c2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80018c6:	6011      	str	r1, [r2, #0]
  return result;
 80018c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018cc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	fab2 f282 	clz	r2, r2
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f002 021f 	and.w	r2, r2, #31
 80018e2:	2101      	movs	r1, #1
 80018e4:	fa01 f202 	lsl.w	r2, r1, r2
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d180      	bne.n	80017f0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018ee:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d105      	bne.n	8001902 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f6:	4b9e      	ldr	r3, [pc, #632]	@ (8001b70 <HAL_RCC_OscConfig+0xe38>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001b70 <HAL_RCC_OscConfig+0xe38>)
 80018fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001900:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001902:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001906:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 825e 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001914:	4b96      	ldr	r3, [pc, #600]	@ (8001b70 <HAL_RCC_OscConfig+0xe38>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b08      	cmp	r3, #8
 800191e:	f000 821f 	beq.w	8001d60 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001922:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001926:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b02      	cmp	r3, #2
 8001930:	f040 8170 	bne.w	8001c14 <HAL_RCC_OscConfig+0xedc>
 8001934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001938:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800193c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001946:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001954:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001958:	601a      	str	r2, [r3, #0]
  return result;
 800195a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800195e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001962:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800196e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	461a      	mov	r2, r3
 8001976:	2300      	movs	r3, #0
 8001978:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197a:	f7fe fe7d 	bl	8000678 <HAL_GetTick>
 800197e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001982:	e009      	b.n	8001998 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7fe fe78 	bl	8000678 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e21c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x109a>
 8001998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019aa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fa93 f2a3 	rbit	r2, r3
 80019b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019bc:	601a      	str	r2, [r3, #0]
  return result;
 80019be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c8:	fab3 f383 	clz	r3, r3
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d102      	bne.n	80019e2 <HAL_RCC_OscConfig+0xcaa>
 80019dc:	4b64      	ldr	r3, [pc, #400]	@ (8001b70 <HAL_RCC_OscConfig+0xe38>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	e027      	b.n	8001a32 <HAL_RCC_OscConfig+0xcfa>
 80019e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a02:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	fa93 f2a3 	rbit	r2, r3
 8001a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a28:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	4b50      	ldr	r3, [pc, #320]	@ (8001b70 <HAL_RCC_OscConfig+0xe38>)
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a36:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a3a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a3e:	6011      	str	r1, [r2, #0]
 8001a40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a44:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	fa92 f1a2 	rbit	r1, r2
 8001a4e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a52:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a56:	6011      	str	r1, [r2, #0]
  return result;
 8001a58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a5c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	fab2 f282 	clz	r2, r2
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f002 021f 	and.w	r2, r2, #31
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f202 	lsl.w	r2, r1, r2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d182      	bne.n	8001984 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b70 <HAL_RCC_OscConfig+0xe38>)
 8001a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a82:	f023 020f 	bic.w	r2, r3, #15
 8001a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	4937      	ldr	r1, [pc, #220]	@ (8001b70 <HAL_RCC_OscConfig+0xe38>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001a98:	4b35      	ldr	r3, [pc, #212]	@ (8001b70 <HAL_RCC_OscConfig+0xe38>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001aa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6a19      	ldr	r1, [r3, #32]
 8001aac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	492d      	ldr	r1, [pc, #180]	@ (8001b70 <HAL_RCC_OscConfig+0xe38>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
 8001ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ac8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	fa93 f2a3 	rbit	r2, r3
 8001adc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ae4:	601a      	str	r2, [r3, #0]
  return result;
 8001ae6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aea:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001aee:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001afa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	461a      	mov	r2, r3
 8001b02:	2301      	movs	r3, #1
 8001b04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7fe fdb7 	bl	8000678 <HAL_GetTick>
 8001b0a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0e:	e009      	b.n	8001b24 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b10:	f7fe fdb2 	bl	8000678 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e156      	b.n	8001dd2 <HAL_RCC_OscConfig+0x109a>
 8001b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b28:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b36:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b44:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b48:	601a      	str	r2, [r3, #0]
  return result;
 8001b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_RCC_OscConfig+0xe3c>
 8001b68:	4b01      	ldr	r3, [pc, #4]	@ (8001b70 <HAL_RCC_OscConfig+0xe38>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	e02a      	b.n	8001bc4 <HAL_RCC_OscConfig+0xe8c>
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b78:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b86:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b94:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b9e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001ba2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bac:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	fa93 f2a3 	rbit	r2, r3
 8001bb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bba:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	4b86      	ldr	r3, [pc, #536]	@ (8001ddc <HAL_RCC_OscConfig+0x10a4>)
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bc8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bcc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bd0:	6011      	str	r1, [r2, #0]
 8001bd2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bd6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	fa92 f1a2 	rbit	r1, r2
 8001be0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001be4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001be8:	6011      	str	r1, [r2, #0]
  return result;
 8001bea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bee:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	fab2 f282 	clz	r2, r2
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	f042 0220 	orr.w	r2, r2, #32
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	f002 021f 	and.w	r2, r2, #31
 8001c04:	2101      	movs	r1, #1
 8001c06:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f43f af7f 	beq.w	8001b10 <HAL_RCC_OscConfig+0xdd8>
 8001c12:	e0dd      	b.n	8001dd0 <HAL_RCC_OscConfig+0x1098>
 8001c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c18:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c26:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c34:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c38:	601a      	str	r2, [r3, #0]
  return result;
 8001c3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c42:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c4e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	461a      	mov	r2, r3
 8001c56:	2300      	movs	r3, #0
 8001c58:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7fe fd0d 	bl	8000678 <HAL_GetTick>
 8001c5e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c62:	e009      	b.n	8001c78 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c64:	f7fe fd08 	bl	8000678 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0ac      	b.n	8001dd2 <HAL_RCC_OscConfig+0x109a>
 8001c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fa93 f2a3 	rbit	r2, r3
 8001c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c98:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c9c:	601a      	str	r2, [r3, #0]
  return result;
 8001c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ca6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d102      	bne.n	8001cc2 <HAL_RCC_OscConfig+0xf8a>
 8001cbc:	4b47      	ldr	r3, [pc, #284]	@ (8001ddc <HAL_RCC_OscConfig+0x10a4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	e027      	b.n	8001d12 <HAL_RCC_OscConfig+0xfda>
 8001cc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001cca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	fa93 f2a3 	rbit	r2, r3
 8001cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cec:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001cf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cfa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	fa93 f2a3 	rbit	r2, r3
 8001d04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d08:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	4b33      	ldr	r3, [pc, #204]	@ (8001ddc <HAL_RCC_OscConfig+0x10a4>)
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d16:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d1a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d1e:	6011      	str	r1, [r2, #0]
 8001d20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d24:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	fa92 f1a2 	rbit	r1, r2
 8001d2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d32:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d36:	6011      	str	r1, [r2, #0]
  return result;
 8001d38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d3c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	fab2 f282 	clz	r2, r2
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f042 0220 	orr.w	r2, r2, #32
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f002 021f 	and.w	r2, r2, #31
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f202 	lsl.w	r2, r1, r2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d182      	bne.n	8001c64 <HAL_RCC_OscConfig+0xf2c>
 8001d5e:	e037      	b.n	8001dd0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e02e      	b.n	8001dd2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d74:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <HAL_RCC_OscConfig+0x10a4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d7c:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <HAL_RCC_OscConfig+0x10a4>)
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d80:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001d88:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d117      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001da0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001da4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d10b      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001db8:	f003 020f 	and.w	r2, r3, #15
 8001dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b09e      	sub	sp, #120	@ 0x78
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e162      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b90      	ldr	r3, [pc, #576]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b8d      	ldr	r3, [pc, #564]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	498b      	ldr	r1, [pc, #556]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b89      	ldr	r3, [pc, #548]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e14a      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b82      	ldr	r3, [pc, #520]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	497f      	ldr	r1, [pc, #508]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80dc 	beq.w	800200c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d13c      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xf6>
 8001e5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e60:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xa6>
 8001e80:	4b6f      	ldr	r3, [pc, #444]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e00f      	b.n	8001ea6 <HAL_RCC_ClockConfig+0xc6>
 8001e86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e8a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e98:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ea2:	4b67      	ldr	r3, [pc, #412]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001eaa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001eac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eae:	fa92 f2a2 	rbit	r2, r2
 8001eb2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001eb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001eb6:	fab2 f282 	clz	r2, r2
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	f042 0220 	orr.w	r2, r2, #32
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f002 021f 	and.w	r2, r2, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d17b      	bne.n	8001fca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0f3      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d13c      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x178>
 8001ede:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ee2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d102      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x128>
 8001f02:	4b4f      	ldr	r3, [pc, #316]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	e00f      	b.n	8001f28 <HAL_RCC_ClockConfig+0x148>
 8001f08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f24:	4b46      	ldr	r3, [pc, #280]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f2c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f30:	fa92 f2a2 	rbit	r2, r2
 8001f34:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d13a      	bne.n	8001fca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0b2      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d102      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x1a0>
 8001f7a:	4b31      	ldr	r3, [pc, #196]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	e00d      	b.n	8001f9c <HAL_RCC_ClockConfig+0x1bc>
 8001f80:	2302      	movs	r3, #2
 8001f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	4b29      	ldr	r3, [pc, #164]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	61ba      	str	r2, [r7, #24]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	fa92 f2a2 	rbit	r2, r2
 8001fa6:	617a      	str	r2, [r7, #20]
  return result;
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	fab2 f282 	clz	r2, r2
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	f042 0220 	orr.w	r2, r2, #32
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	f002 021f 	and.w	r2, r2, #31
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e079      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	491a      	ldr	r1, [pc, #104]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7fe fb4c 	bl	8000678 <HAL_GetTick>
 8001fe0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7fe fb48 	bl	8000678 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e061      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d214      	bcs.n	8002044 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 0207 	bic.w	r2, r3, #7
 8002022:	4906      	ldr	r1, [pc, #24]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b04      	ldr	r3, [pc, #16]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e040      	b.n	80020be <HAL_RCC_ClockConfig+0x2de>
 800203c:	40022000 	.word	0x40022000
 8002040:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d008      	beq.n	8002062 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002050:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	491a      	ldr	r1, [pc, #104]	@ (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206e:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4912      	ldr	r1, [pc, #72]	@ (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002082:	f000 f829 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002086:	4601      	mov	r1, r0
 8002088:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <HAL_RCC_ClockConfig+0x2e8>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002090:	22f0      	movs	r2, #240	@ 0xf0
 8002092:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	fa92 f2a2 	rbit	r2, r2
 800209a:	60fa      	str	r2, [r7, #12]
  return result;
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	fab2 f282 	clz	r2, r2
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	40d3      	lsrs	r3, r2
 80020a6:	4a09      	ldr	r2, [pc, #36]	@ (80020cc <HAL_RCC_ClockConfig+0x2ec>)
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	fa21 f303 	lsr.w	r3, r1, r3
 80020ae:	4a08      	ldr	r2, [pc, #32]	@ (80020d0 <HAL_RCC_ClockConfig+0x2f0>)
 80020b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020b2:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_RCC_ClockConfig+0x2f4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa9a 	bl	80005f0 <HAL_InitTick>
  
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3778      	adds	r7, #120	@ 0x78
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080036fc 	.word	0x080036fc
 80020d0:	2000001c 	.word	0x2000001c
 80020d4:	20000020 	.word	0x20000020

080020d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80020f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d002      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x30>
 8002102:	2b08      	cmp	r3, #8
 8002104:	d003      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x36>
 8002106:	e029      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002108:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x9c>)
 800210a:	613b      	str	r3, [r7, #16]
      break;
 800210c:	e029      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	0c9b      	lsrs	r3, r3, #18
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	4a18      	ldr	r2, [pc, #96]	@ (8002178 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800211c:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	4a15      	ldr	r2, [pc, #84]	@ (800217c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002134:	4a0f      	ldr	r2, [pc, #60]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	fbb2 f2f3 	udiv	r2, r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e007      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002146:	4a0b      	ldr	r2, [pc, #44]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	fbb2 f2f3 	udiv	r2, r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	613b      	str	r3, [r7, #16]
      break;
 800215a:	e002      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x9c>)
 800215e:	613b      	str	r3, [r7, #16]
      break;
 8002160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002162:	693b      	ldr	r3, [r7, #16]
}
 8002164:	4618      	mov	r0, r3
 8002166:	371c      	adds	r7, #28
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	40021000 	.word	0x40021000
 8002174:	007a1200 	.word	0x007a1200
 8002178:	08003714 	.word	0x08003714
 800217c:	08003724 	.word	0x08003724

08002180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002184:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <HAL_RCC_GetHCLKFreq+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	2000001c 	.word	0x2000001c

08002198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800219e:	f7ff ffef 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021a2:	4601      	mov	r1, r0
 80021a4:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021ac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80021b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	fa92 f2a2 	rbit	r2, r2
 80021b8:	603a      	str	r2, [r7, #0]
  return result;
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	fab2 f282 	clz	r2, r2
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	40d3      	lsrs	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	0800370c 	.word	0x0800370c

080021dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021e2:	f7ff ffcd 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021e6:	4601      	mov	r1, r0
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80021f0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80021f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	fa92 f2a2 	rbit	r2, r2
 80021fc:	603a      	str	r2, [r7, #0]
  return result;
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	40d3      	lsrs	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	@ (800221c <HAL_RCC_GetPCLK2Freq+0x40>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	0800370c 	.word	0x0800370c

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b092      	sub	sp, #72	@ 0x48
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80d4 	beq.w	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002244:	4b4e      	ldr	r3, [pc, #312]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10e      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	4b4b      	ldr	r3, [pc, #300]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	4a4a      	ldr	r2, [pc, #296]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800225a:	61d3      	str	r3, [r2, #28]
 800225c:	4b48      	ldr	r3, [pc, #288]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226e:	4b45      	ldr	r3, [pc, #276]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227a:	4b42      	ldr	r3, [pc, #264]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a41      	ldr	r2, [pc, #260]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002284:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7fe f9f7 	bl	8000678 <HAL_GetTick>
 800228a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	e008      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7fe f9f3 	bl	8000678 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	@ 0x64
 800229a:	d901      	bls.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1d6      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	4b38      	ldr	r3, [pc, #224]	@ (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ac:	4b34      	ldr	r3, [pc, #208]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8084 	beq.w	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d07c      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80022e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b26      	ldr	r3, [pc, #152]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	461a      	mov	r2, r3
 80022f6:	2301      	movs	r3, #1
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	4b1d      	ldr	r3, [pc, #116]	@ (8002388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	461a      	mov	r2, r3
 800231a:	2300      	movs	r3, #0
 800231c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800231e:	4a18      	ldr	r2, [pc, #96]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002322:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d04b      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fe f9a3 	bl	8000678 <HAL_GetTick>
 8002332:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	e00a      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7fe f99f 	bl	8000678 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002344:	4293      	cmp	r3, r2
 8002346:	d901      	bls.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e180      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800234c:	2302      	movs	r3, #2
 800234e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
 8002358:	2302      	movs	r3, #2
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	61fb      	str	r3, [r7, #28]
  return result;
 8002364:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	095b      	lsrs	r3, r3, #5
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d108      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800237a:	4b01      	ldr	r3, [pc, #4]	@ (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	e00d      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002380:	40021000 	.word	0x40021000
 8002384:	40007000 	.word	0x40007000
 8002388:	10908100 	.word	0x10908100
 800238c:	2302      	movs	r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	4b9a      	ldr	r3, [pc, #616]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	2202      	movs	r2, #2
 800239e:	613a      	str	r2, [r7, #16]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	fa92 f2a2 	rbit	r2, r2
 80023a6:	60fa      	str	r2, [r7, #12]
  return result;
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	fab2 f282 	clz	r2, r2
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	f002 021f 	and.w	r2, r2, #31
 80023ba:	2101      	movs	r1, #1
 80023bc:	fa01 f202 	lsl.w	r2, r1, r2
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0b7      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	498c      	ldr	r1, [pc, #560]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b88      	ldr	r3, [pc, #544]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	4a87      	ldr	r2, [pc, #540]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023f8:	4b82      	ldr	r3, [pc, #520]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	f023 0203 	bic.w	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	497f      	ldr	r1, [pc, #508]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002416:	4b7b      	ldr	r3, [pc, #492]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	4978      	ldr	r1, [pc, #480]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002424:	4313      	orrs	r3, r2
 8002426:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002434:	4b73      	ldr	r3, [pc, #460]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002438:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	4970      	ldr	r1, [pc, #448]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002452:	4b6c      	ldr	r3, [pc, #432]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f023 0210 	bic.w	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4969      	ldr	r1, [pc, #420]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002470:	4b64      	ldr	r3, [pc, #400]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247c:	4961      	ldr	r1, [pc, #388]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800248e:	4b5d      	ldr	r3, [pc, #372]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	f023 0220 	bic.w	r2, r3, #32
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	495a      	ldr	r1, [pc, #360]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ac:	4b55      	ldr	r3, [pc, #340]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	4952      	ldr	r1, [pc, #328]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	494b      	ldr	r1, [pc, #300]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024e8:	4b46      	ldr	r3, [pc, #280]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4943      	ldr	r1, [pc, #268]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002506:	4b3f      	ldr	r3, [pc, #252]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	493c      	ldr	r1, [pc, #240]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002524:	4b37      	ldr	r3, [pc, #220]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	4934      	ldr	r1, [pc, #208]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002542:	4b30      	ldr	r3, [pc, #192]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254e:	492d      	ldr	r1, [pc, #180]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002560:	4b28      	ldr	r3, [pc, #160]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002564:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256c:	4925      	ldr	r1, [pc, #148]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d008      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800257e:	4b21      	ldr	r3, [pc, #132]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	491e      	ldr	r1, [pc, #120]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a8:	4916      	ldr	r1, [pc, #88]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80025ba:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c6:	490f      	ldr	r1, [pc, #60]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80025d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e4:	4907      	ldr	r1, [pc, #28]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00c      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80025f6:	4b03      	ldr	r3, [pc, #12]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	e002      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260a:	4913      	ldr	r1, [pc, #76]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800260c:	4313      	orrs	r3, r2
 800260e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800261c:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002620:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002628:	490b      	ldr	r1, [pc, #44]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800262a:	4313      	orrs	r3, r2
 800262c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800263a:	4b07      	ldr	r3, [pc, #28]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002646:	4904      	ldr	r1, [pc, #16]	@ (8002658 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002648:	4313      	orrs	r3, r2
 800264a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3748      	adds	r7, #72	@ 0x48
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000

0800265c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e040      	b.n	80026f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fd fee0 	bl	8000444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2224      	movs	r2, #36	@ 0x24
 8002688:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fd8c 	bl	80031c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fbb5 	bl	8002e18 <UART_SetConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e01b      	b.n	80026f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fe0b 	bl	8003304 <UART_CheckIdleState>
 80026ee:	4603      	mov	r3, r0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	@ 0x28
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800270c:	2b20      	cmp	r3, #32
 800270e:	d177      	bne.n	8002800 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_UART_Transmit+0x24>
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e070      	b.n	8002802 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2221      	movs	r2, #33	@ 0x21
 800272c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800272e:	f7fd ffa3 	bl	8000678 <HAL_GetTick>
 8002732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	88fa      	ldrh	r2, [r7, #6]
 8002738:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	88fa      	ldrh	r2, [r7, #6]
 8002740:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800274c:	d108      	bne.n	8002760 <HAL_UART_Transmit+0x68>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	e003      	b.n	8002768 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002768:	e02f      	b.n	80027ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2200      	movs	r2, #0
 8002772:	2180      	movs	r1, #128	@ 0x80
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fe6d 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e03b      	b.n	8002802 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	881a      	ldrh	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800279c:	b292      	uxth	r2, r2
 800279e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	3302      	adds	r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	e007      	b.n	80027b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3301      	adds	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1c9      	bne.n	800276a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2200      	movs	r2, #0
 80027de:	2140      	movs	r1, #64	@ 0x40
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fe37 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e005      	b.n	8002802 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2220      	movs	r2, #32
 80027fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e000      	b.n	8002802 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002800:	2302      	movs	r3, #2
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	3720      	adds	r7, #32
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b0ba      	sub	sp, #232	@ 0xe8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002832:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002836:	f640 030f 	movw	r3, #2063	@ 0x80f
 800283a:	4013      	ands	r3, r2
 800283c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d115      	bne.n	8002874 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00f      	beq.n	8002874 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d009      	beq.n	8002874 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 82ab 	beq.w	8002dc0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
      }
      return;
 8002872:	e2a5      	b.n	8002dc0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8117 	beq.w	8002aac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800287e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800288a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800288e:	4b85      	ldr	r3, [pc, #532]	@ (8002aa4 <HAL_UART_IRQHandler+0x298>)
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 810a 	beq.w	8002aac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d011      	beq.n	80028c8 <HAL_UART_IRQHandler+0xbc>
 80028a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00b      	beq.n	80028c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2201      	movs	r2, #1
 80028b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d011      	beq.n	80028f8 <HAL_UART_IRQHandler+0xec>
 80028d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2202      	movs	r2, #2
 80028e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ee:	f043 0204 	orr.w	r2, r3, #4
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d011      	beq.n	8002928 <HAL_UART_IRQHandler+0x11c>
 8002904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00b      	beq.n	8002928 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2204      	movs	r2, #4
 8002916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800291e:	f043 0202 	orr.w	r2, r3, #2
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d017      	beq.n	8002964 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002944:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2208      	movs	r2, #8
 8002952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800295a:	f043 0208 	orr.w	r2, r3, #8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800296c:	2b00      	cmp	r3, #0
 800296e:	d012      	beq.n	8002996 <HAL_UART_IRQHandler+0x18a>
 8002970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002974:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00c      	beq.n	8002996 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8211 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80029a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029de:	2b40      	cmp	r3, #64	@ 0x40
 80029e0:	d005      	beq.n	80029ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d04f      	beq.n	8002a8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fd9d 	bl	800352e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fe:	2b40      	cmp	r3, #64	@ 0x40
 8002a00:	d141      	bne.n	8002a86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3308      	adds	r3, #8
 8002a08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a10:	e853 3f00 	ldrex	r3, [r3]
 8002a14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3308      	adds	r3, #8
 8002a2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1d9      	bne.n	8002a02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d013      	beq.n	8002a7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5a:	4a13      	ldr	r2, [pc, #76]	@ (8002aa8 <HAL_UART_IRQHandler+0x29c>)
 8002a5c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd ff87 	bl	8000976 <HAL_DMA_Abort_IT>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7c:	e00f      	b.n	8002a9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f9b4 	bl	8002dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a84:	e00b      	b.n	8002a9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f9b0 	bl	8002dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8c:	e007      	b.n	8002a9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f9ac 	bl	8002dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002a9c:	e192      	b.n	8002dc4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a9e:	bf00      	nop
    return;
 8002aa0:	e190      	b.n	8002dc4 <HAL_UART_IRQHandler+0x5b8>
 8002aa2:	bf00      	nop
 8002aa4:	04000120 	.word	0x04000120
 8002aa8:	080035f7 	.word	0x080035f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	f040 814b 	bne.w	8002d4c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8144 	beq.w	8002d4c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 813d 	beq.w	8002d4c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae4:	2b40      	cmp	r3, #64	@ 0x40
 8002ae6:	f040 80b5 	bne.w	8002c54 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002af6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8164 	beq.w	8002dc8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	f080 815c 	bcs.w	8002dc8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	f000 8086 	beq.w	8002c32 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b32:	e853 3f00 	ldrex	r3, [r3]
 8002b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b54:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b58:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b60:	e841 2300 	strex	r3, r2, [r1]
 8002b64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1da      	bne.n	8002b26 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3308      	adds	r3, #8
 8002b76:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b7a:	e853 3f00 	ldrex	r3, [r3]
 8002b7e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3308      	adds	r3, #8
 8002b90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b94:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b98:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ba0:	e841 2300 	strex	r3, r2, [r1]
 8002ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ba6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e1      	bne.n	8002b70 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bb6:	e853 3f00 	ldrex	r3, [r3]
 8002bba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3308      	adds	r3, #8
 8002bcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002bd0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002bd6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002bd8:	e841 2300 	strex	r3, r2, [r1]
 8002bdc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1e3      	bne.n	8002bac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bfa:	e853 3f00 	ldrex	r3, [r3]
 8002bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c02:	f023 0310 	bic.w	r3, r3, #16
 8002c06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c16:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c1c:	e841 2300 	strex	r3, r2, [r1]
 8002c20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e4      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fe64 	bl	80008fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2202      	movs	r2, #2
 8002c36:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f8d7 	bl	8002e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c52:	e0b9      	b.n	8002dc8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80ab 	beq.w	8002dcc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002c76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 80a6 	beq.w	8002dcc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ca2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ca8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e4      	bne.n	8002c80 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3308      	adds	r3, #8
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	e853 3f00 	ldrex	r3, [r3]
 8002cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002cda:	633a      	str	r2, [r7, #48]	@ 0x30
 8002cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1e3      	bne.n	8002cb6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	e853 3f00 	ldrex	r3, [r3]
 8002d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0310 	bic.w	r3, r3, #16
 8002d16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	69b9      	ldr	r1, [r7, #24]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	617b      	str	r3, [r7, #20]
   return(result);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e4      	bne.n	8002d02 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f85b 	bl	8002e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d4a:	e03f      	b.n	8002dcc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00e      	beq.n	8002d76 <HAL_UART_IRQHandler+0x56a>
 8002d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002d6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fc81 	bl	8003676 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d74:	e02d      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00e      	beq.n	8002da0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01c      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
    }
    return;
 8002d9e:	e017      	b.n	8002dd0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d012      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x5c6>
 8002dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fc32 	bl	8003622 <UART_EndTransmit_IT>
    return;
 8002dbe:	e008      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002dc0:	bf00      	nop
 8002dc2:	e006      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002dc4:	bf00      	nop
 8002dc6:	e004      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002dc8:	bf00      	nop
 8002dca:	e002      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002dcc:	bf00      	nop
 8002dce:	e000      	b.n	8002dd2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002dd0:	bf00      	nop
  }

}
 8002dd2:	37e8      	adds	r7, #232	@ 0xe8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b92      	ldr	r3, [pc, #584]	@ (800308c <UART_SetConfig+0x274>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	6979      	ldr	r1, [r7, #20]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a80      	ldr	r2, [pc, #512]	@ (8003090 <UART_SetConfig+0x278>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d120      	bne.n	8002ed6 <UART_SetConfig+0xbe>
 8002e94:	4b7f      	ldr	r3, [pc, #508]	@ (8003094 <UART_SetConfig+0x27c>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d817      	bhi.n	8002ed0 <UART_SetConfig+0xb8>
 8002ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea8 <UART_SetConfig+0x90>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ec5 	.word	0x08002ec5
 8002eb0:	08002ecb 	.word	0x08002ecb
 8002eb4:	08002ebf 	.word	0x08002ebf
 8002eb8:	2301      	movs	r3, #1
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e0b5      	b.n	800302a <UART_SetConfig+0x212>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	e0b2      	b.n	800302a <UART_SetConfig+0x212>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e0af      	b.n	800302a <UART_SetConfig+0x212>
 8002eca:	2308      	movs	r3, #8
 8002ecc:	77fb      	strb	r3, [r7, #31]
 8002ece:	e0ac      	b.n	800302a <UART_SetConfig+0x212>
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	e0a9      	b.n	800302a <UART_SetConfig+0x212>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6f      	ldr	r2, [pc, #444]	@ (8003098 <UART_SetConfig+0x280>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d124      	bne.n	8002f2a <UART_SetConfig+0x112>
 8002ee0:	4b6c      	ldr	r3, [pc, #432]	@ (8003094 <UART_SetConfig+0x27c>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ee8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002eec:	d011      	beq.n	8002f12 <UART_SetConfig+0xfa>
 8002eee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ef2:	d817      	bhi.n	8002f24 <UART_SetConfig+0x10c>
 8002ef4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ef8:	d011      	beq.n	8002f1e <UART_SetConfig+0x106>
 8002efa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002efe:	d811      	bhi.n	8002f24 <UART_SetConfig+0x10c>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <UART_SetConfig+0xf4>
 8002f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f08:	d006      	beq.n	8002f18 <UART_SetConfig+0x100>
 8002f0a:	e00b      	b.n	8002f24 <UART_SetConfig+0x10c>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e08b      	b.n	800302a <UART_SetConfig+0x212>
 8002f12:	2302      	movs	r3, #2
 8002f14:	77fb      	strb	r3, [r7, #31]
 8002f16:	e088      	b.n	800302a <UART_SetConfig+0x212>
 8002f18:	2304      	movs	r3, #4
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	e085      	b.n	800302a <UART_SetConfig+0x212>
 8002f1e:	2308      	movs	r3, #8
 8002f20:	77fb      	strb	r3, [r7, #31]
 8002f22:	e082      	b.n	800302a <UART_SetConfig+0x212>
 8002f24:	2310      	movs	r3, #16
 8002f26:	77fb      	strb	r3, [r7, #31]
 8002f28:	e07f      	b.n	800302a <UART_SetConfig+0x212>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a5b      	ldr	r2, [pc, #364]	@ (800309c <UART_SetConfig+0x284>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d124      	bne.n	8002f7e <UART_SetConfig+0x166>
 8002f34:	4b57      	ldr	r3, [pc, #348]	@ (8003094 <UART_SetConfig+0x27c>)
 8002f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f38:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002f3c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f40:	d011      	beq.n	8002f66 <UART_SetConfig+0x14e>
 8002f42:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f46:	d817      	bhi.n	8002f78 <UART_SetConfig+0x160>
 8002f48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f4c:	d011      	beq.n	8002f72 <UART_SetConfig+0x15a>
 8002f4e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f52:	d811      	bhi.n	8002f78 <UART_SetConfig+0x160>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <UART_SetConfig+0x148>
 8002f58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x154>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x160>
 8002f60:	2300      	movs	r3, #0
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e061      	b.n	800302a <UART_SetConfig+0x212>
 8002f66:	2302      	movs	r3, #2
 8002f68:	77fb      	strb	r3, [r7, #31]
 8002f6a:	e05e      	b.n	800302a <UART_SetConfig+0x212>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e05b      	b.n	800302a <UART_SetConfig+0x212>
 8002f72:	2308      	movs	r3, #8
 8002f74:	77fb      	strb	r3, [r7, #31]
 8002f76:	e058      	b.n	800302a <UART_SetConfig+0x212>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e055      	b.n	800302a <UART_SetConfig+0x212>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	@ (80030a0 <UART_SetConfig+0x288>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d124      	bne.n	8002fd2 <UART_SetConfig+0x1ba>
 8002f88:	4b42      	ldr	r3, [pc, #264]	@ (8003094 <UART_SetConfig+0x27c>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002f90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f94:	d011      	beq.n	8002fba <UART_SetConfig+0x1a2>
 8002f96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f9a:	d817      	bhi.n	8002fcc <UART_SetConfig+0x1b4>
 8002f9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fa0:	d011      	beq.n	8002fc6 <UART_SetConfig+0x1ae>
 8002fa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fa6:	d811      	bhi.n	8002fcc <UART_SetConfig+0x1b4>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <UART_SetConfig+0x19c>
 8002fac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fb0:	d006      	beq.n	8002fc0 <UART_SetConfig+0x1a8>
 8002fb2:	e00b      	b.n	8002fcc <UART_SetConfig+0x1b4>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	e037      	b.n	800302a <UART_SetConfig+0x212>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	77fb      	strb	r3, [r7, #31]
 8002fbe:	e034      	b.n	800302a <UART_SetConfig+0x212>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e031      	b.n	800302a <UART_SetConfig+0x212>
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	77fb      	strb	r3, [r7, #31]
 8002fca:	e02e      	b.n	800302a <UART_SetConfig+0x212>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e02b      	b.n	800302a <UART_SetConfig+0x212>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a33      	ldr	r2, [pc, #204]	@ (80030a4 <UART_SetConfig+0x28c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d124      	bne.n	8003026 <UART_SetConfig+0x20e>
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8003094 <UART_SetConfig+0x27c>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002fe4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fe8:	d011      	beq.n	800300e <UART_SetConfig+0x1f6>
 8002fea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fee:	d817      	bhi.n	8003020 <UART_SetConfig+0x208>
 8002ff0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ff4:	d011      	beq.n	800301a <UART_SetConfig+0x202>
 8002ff6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ffa:	d811      	bhi.n	8003020 <UART_SetConfig+0x208>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <UART_SetConfig+0x1f0>
 8003000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003004:	d006      	beq.n	8003014 <UART_SetConfig+0x1fc>
 8003006:	e00b      	b.n	8003020 <UART_SetConfig+0x208>
 8003008:	2300      	movs	r3, #0
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	e00d      	b.n	800302a <UART_SetConfig+0x212>
 800300e:	2302      	movs	r3, #2
 8003010:	77fb      	strb	r3, [r7, #31]
 8003012:	e00a      	b.n	800302a <UART_SetConfig+0x212>
 8003014:	2304      	movs	r3, #4
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e007      	b.n	800302a <UART_SetConfig+0x212>
 800301a:	2308      	movs	r3, #8
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e004      	b.n	800302a <UART_SetConfig+0x212>
 8003020:	2310      	movs	r3, #16
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e001      	b.n	800302a <UART_SetConfig+0x212>
 8003026:	2310      	movs	r3, #16
 8003028:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003032:	d16b      	bne.n	800310c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003034:	7ffb      	ldrb	r3, [r7, #31]
 8003036:	2b08      	cmp	r3, #8
 8003038:	d838      	bhi.n	80030ac <UART_SetConfig+0x294>
 800303a:	a201      	add	r2, pc, #4	@ (adr r2, 8003040 <UART_SetConfig+0x228>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	08003065 	.word	0x08003065
 8003044:	0800306d 	.word	0x0800306d
 8003048:	08003075 	.word	0x08003075
 800304c:	080030ad 	.word	0x080030ad
 8003050:	0800307b 	.word	0x0800307b
 8003054:	080030ad 	.word	0x080030ad
 8003058:	080030ad 	.word	0x080030ad
 800305c:	080030ad 	.word	0x080030ad
 8003060:	08003083 	.word	0x08003083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003064:	f7ff f898 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 8003068:	61b8      	str	r0, [r7, #24]
        break;
 800306a:	e024      	b.n	80030b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800306c:	f7ff f8b6 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8003070:	61b8      	str	r0, [r7, #24]
        break;
 8003072:	e020      	b.n	80030b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0c      	ldr	r3, [pc, #48]	@ (80030a8 <UART_SetConfig+0x290>)
 8003076:	61bb      	str	r3, [r7, #24]
        break;
 8003078:	e01d      	b.n	80030b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f82d 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 800307e:	61b8      	str	r0, [r7, #24]
        break;
 8003080:	e019      	b.n	80030b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003086:	61bb      	str	r3, [r7, #24]
        break;
 8003088:	e015      	b.n	80030b6 <UART_SetConfig+0x29e>
 800308a:	bf00      	nop
 800308c:	efff69f3 	.word	0xefff69f3
 8003090:	40013800 	.word	0x40013800
 8003094:	40021000 	.word	0x40021000
 8003098:	40004400 	.word	0x40004400
 800309c:	40004800 	.word	0x40004800
 80030a0:	40004c00 	.word	0x40004c00
 80030a4:	40005000 	.word	0x40005000
 80030a8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	77bb      	strb	r3, [r7, #30]
        break;
 80030b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d073      	beq.n	80031a4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	005a      	lsls	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	441a      	add	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b0f      	cmp	r3, #15
 80030d6:	d916      	bls.n	8003106 <UART_SetConfig+0x2ee>
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030de:	d212      	bcs.n	8003106 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f023 030f 	bic.w	r3, r3, #15
 80030e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	085b      	lsrs	r3, r3, #1
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	89fb      	ldrh	r3, [r7, #14]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	89fa      	ldrh	r2, [r7, #14]
 8003102:	60da      	str	r2, [r3, #12]
 8003104:	e04e      	b.n	80031a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	77bb      	strb	r3, [r7, #30]
 800310a:	e04b      	b.n	80031a4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800310c:	7ffb      	ldrb	r3, [r7, #31]
 800310e:	2b08      	cmp	r3, #8
 8003110:	d827      	bhi.n	8003162 <UART_SetConfig+0x34a>
 8003112:	a201      	add	r2, pc, #4	@ (adr r2, 8003118 <UART_SetConfig+0x300>)
 8003114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003118:	0800313d 	.word	0x0800313d
 800311c:	08003145 	.word	0x08003145
 8003120:	0800314d 	.word	0x0800314d
 8003124:	08003163 	.word	0x08003163
 8003128:	08003153 	.word	0x08003153
 800312c:	08003163 	.word	0x08003163
 8003130:	08003163 	.word	0x08003163
 8003134:	08003163 	.word	0x08003163
 8003138:	0800315b 	.word	0x0800315b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800313c:	f7ff f82c 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 8003140:	61b8      	str	r0, [r7, #24]
        break;
 8003142:	e013      	b.n	800316c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003144:	f7ff f84a 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8003148:	61b8      	str	r0, [r7, #24]
        break;
 800314a:	e00f      	b.n	800316c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800314c:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <UART_SetConfig+0x3a4>)
 800314e:	61bb      	str	r3, [r7, #24]
        break;
 8003150:	e00c      	b.n	800316c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003152:	f7fe ffc1 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8003156:	61b8      	str	r0, [r7, #24]
        break;
 8003158:	e008      	b.n	800316c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800315e:	61bb      	str	r3, [r7, #24]
        break;
 8003160:	e004      	b.n	800316c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	77bb      	strb	r3, [r7, #30]
        break;
 800316a:	bf00      	nop
    }

    if (pclk != 0U)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d018      	beq.n	80031a4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	085a      	lsrs	r2, r3, #1
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	441a      	add	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b0f      	cmp	r3, #15
 800318a:	d909      	bls.n	80031a0 <UART_SetConfig+0x388>
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003192:	d205      	bcs.n	80031a0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	e001      	b.n	80031a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80031b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	007a1200 	.word	0x007a1200

080031c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01a      	beq.n	80032d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032be:	d10a      	bne.n	80032d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b098      	sub	sp, #96	@ 0x60
 8003308:	af02      	add	r7, sp, #8
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003314:	f7fd f9b0 	bl	8000678 <HAL_GetTick>
 8003318:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b08      	cmp	r3, #8
 8003326:	d12e      	bne.n	8003386 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003328:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003330:	2200      	movs	r2, #0
 8003332:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f88c 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d021      	beq.n	8003386 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800334a:	e853 3f00 	ldrex	r3, [r3]
 800334e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003356:	653b      	str	r3, [r7, #80]	@ 0x50
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003360:	647b      	str	r3, [r7, #68]	@ 0x44
 8003362:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003368:	e841 2300 	strex	r3, r2, [r1]
 800336c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800336e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e6      	bne.n	8003342 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e062      	b.n	800344c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b04      	cmp	r3, #4
 8003392:	d149      	bne.n	8003428 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003394:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339c:	2200      	movs	r2, #0
 800339e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f856 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d03c      	beq.n	8003428 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	623b      	str	r3, [r7, #32]
   return(result);
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e6      	bne.n	80033ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3308      	adds	r3, #8
 80033e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3308      	adds	r3, #8
 80033fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003400:	61fa      	str	r2, [r7, #28]
 8003402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	69b9      	ldr	r1, [r7, #24]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	617b      	str	r3, [r7, #20]
   return(result);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e5      	bne.n	80033e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e011      	b.n	800344c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3758      	adds	r7, #88	@ 0x58
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003464:	e04f      	b.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d04b      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7fd f903 	bl	8000678 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <UART_WaitOnFlagUntilTimeout+0x30>
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e04e      	b.n	8003526 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d037      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b80      	cmp	r3, #128	@ 0x80
 800349a:	d034      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb2>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b40      	cmp	r3, #64	@ 0x40
 80034a0:	d031      	beq.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d110      	bne.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2208      	movs	r2, #8
 80034b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f838 	bl	800352e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2208      	movs	r2, #8
 80034c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e029      	b.n	8003526 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034e0:	d111      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f81e 	bl	800352e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e00f      	b.n	8003526 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	429a      	cmp	r2, r3
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	429a      	cmp	r2, r3
 8003522:	d0a0      	beq.n	8003466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800352e:	b480      	push	{r7}
 8003530:	b095      	sub	sp, #84	@ 0x54
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003546:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800354a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003554:	643b      	str	r3, [r7, #64]	@ 0x40
 8003556:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800355a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e6      	bne.n	8003536 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3308      	adds	r3, #8
 800356e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	e853 3f00 	ldrex	r3, [r3]
 8003576:	61fb      	str	r3, [r7, #28]
   return(result);
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3308      	adds	r3, #8
 8003586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003588:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800358a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800358e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003590:	e841 2300 	strex	r3, r2, [r1]
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e5      	bne.n	8003568 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d118      	bne.n	80035d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f023 0310 	bic.w	r3, r3, #16
 80035b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	6979      	ldr	r1, [r7, #20]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	613b      	str	r3, [r7, #16]
   return(result);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e6      	bne.n	80035a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035ea:	bf00      	nop
 80035ec:	3754      	adds	r7, #84	@ 0x54
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7ff fbe9 	bl	8002dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b088      	sub	sp, #32
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	60bb      	str	r3, [r7, #8]
   return(result);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6979      	ldr	r1, [r7, #20]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	613b      	str	r3, [r7, #16]
   return(result);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e6      	bne.n	800362a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff fbb5 	bl	8002dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800366e:	bf00      	nop
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <memset>:
 800368a:	4402      	add	r2, r0
 800368c:	4603      	mov	r3, r0
 800368e:	4293      	cmp	r3, r2
 8003690:	d100      	bne.n	8003694 <memset+0xa>
 8003692:	4770      	bx	lr
 8003694:	f803 1b01 	strb.w	r1, [r3], #1
 8003698:	e7f9      	b.n	800368e <memset+0x4>
	...

0800369c <__libc_init_array>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	4d0d      	ldr	r5, [pc, #52]	@ (80036d4 <__libc_init_array+0x38>)
 80036a0:	4c0d      	ldr	r4, [pc, #52]	@ (80036d8 <__libc_init_array+0x3c>)
 80036a2:	1b64      	subs	r4, r4, r5
 80036a4:	10a4      	asrs	r4, r4, #2
 80036a6:	2600      	movs	r6, #0
 80036a8:	42a6      	cmp	r6, r4
 80036aa:	d109      	bne.n	80036c0 <__libc_init_array+0x24>
 80036ac:	4d0b      	ldr	r5, [pc, #44]	@ (80036dc <__libc_init_array+0x40>)
 80036ae:	4c0c      	ldr	r4, [pc, #48]	@ (80036e0 <__libc_init_array+0x44>)
 80036b0:	f000 f818 	bl	80036e4 <_init>
 80036b4:	1b64      	subs	r4, r4, r5
 80036b6:	10a4      	asrs	r4, r4, #2
 80036b8:	2600      	movs	r6, #0
 80036ba:	42a6      	cmp	r6, r4
 80036bc:	d105      	bne.n	80036ca <__libc_init_array+0x2e>
 80036be:	bd70      	pop	{r4, r5, r6, pc}
 80036c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c4:	4798      	blx	r3
 80036c6:	3601      	adds	r6, #1
 80036c8:	e7ee      	b.n	80036a8 <__libc_init_array+0xc>
 80036ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ce:	4798      	blx	r3
 80036d0:	3601      	adds	r6, #1
 80036d2:	e7f2      	b.n	80036ba <__libc_init_array+0x1e>
 80036d4:	08003734 	.word	0x08003734
 80036d8:	08003734 	.word	0x08003734
 80036dc:	08003734 	.word	0x08003734
 80036e0:	08003738 	.word	0x08003738

080036e4 <_init>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	bf00      	nop
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr

080036f0 <_fini>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	bf00      	nop
 80036f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f6:	bc08      	pop	{r3}
 80036f8:	469e      	mov	lr, r3
 80036fa:	4770      	bx	lr
